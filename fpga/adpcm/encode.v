/* verilator lint_off UNUSED */
/* verilator lint_off DECLFILENAME */
/* verilator lint_off STMTDLY */
/* verilator lint_off WIDTH */
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encode,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqku115-rlf1924-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.710000,HLS_SYN_LAT=136,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=202,HLS_SYN_FF=4848,HLS_SYN_LUT=6417}" *)

module encode (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_address0,
        buff_ce0,
        buff_we0,
        buff_d0,
        buff_q0,
        buff_address1,
        buff_ce1,
        buff_we1,
        buff_d1,
        buff_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 67'b1;
parameter    ap_ST_fsm_state2 = 67'b10;
parameter    ap_ST_fsm_state3 = 67'b100;
parameter    ap_ST_fsm_state4 = 67'b1000;
parameter    ap_ST_fsm_state5 = 67'b10000;
parameter    ap_ST_fsm_state6 = 67'b100000;
parameter    ap_ST_fsm_state7 = 67'b1000000;
parameter    ap_ST_fsm_state8 = 67'b10000000;
parameter    ap_ST_fsm_state9 = 67'b100000000;
parameter    ap_ST_fsm_state10 = 67'b1000000000;
parameter    ap_ST_fsm_state11 = 67'b10000000000;
parameter    ap_ST_fsm_state12 = 67'b100000000000;
parameter    ap_ST_fsm_state13 = 67'b1000000000000;
parameter    ap_ST_fsm_state14 = 67'b10000000000000;
parameter    ap_ST_fsm_state15 = 67'b100000000000000;
parameter    ap_ST_fsm_state16 = 67'b1000000000000000;
parameter    ap_ST_fsm_state17 = 67'b10000000000000000;
parameter    ap_ST_fsm_state18 = 67'b100000000000000000;
parameter    ap_ST_fsm_state19 = 67'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 67'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 67'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 67'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 67'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 67'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 67'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 67'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 67'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 67'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 67'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 67'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 67'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 67'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 67'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 67'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 67'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 67'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 67'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 67'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 67'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 67'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 67'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 67'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 67'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 67'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 67'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 67'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 67'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 67'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 67'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 67'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 67'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 67'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 67'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 67'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 67'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 67'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 67'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 67'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 67'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 67'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 67'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 67'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 67'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 67'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 67'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 67'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 67'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv7_2A = 7'b101010;
parameter    ap_const_lv7_18 = 7'b11000;
parameter    ap_const_lv7_24 = 7'b100100;
parameter    ap_const_lv7_1E = 7'b11110;
parameter    ap_const_lv64_2A = 64'b101010;
parameter    ap_const_lv64_24 = 64'b100100;
parameter    ap_const_lv64_2B = 64'b101011;
parameter    ap_const_lv64_25 = 64'b100101;
parameter    ap_const_lv64_2C = 64'b101100;
parameter    ap_const_lv64_26 = 64'b100110;
parameter    ap_const_lv64_2D = 64'b101101;
parameter    ap_const_lv64_27 = 64'b100111;
parameter    ap_const_lv64_2E = 64'b101110;
parameter    ap_const_lv64_28 = 64'b101000;
parameter    ap_const_lv64_2F = 64'b101111;
parameter    ap_const_lv64_29 = 64'b101001;
parameter    ap_const_lv64_36 = 64'b110110;
parameter    ap_const_lv64_32 = 64'b110010;
parameter    ap_const_lv64_37 = 64'b110111;
parameter    ap_const_lv64_33 = 64'b110011;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_11 = 64'b10001;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_13 = 64'b10011;
parameter    ap_const_lv64_14 = 64'b10100;
parameter    ap_const_lv64_15 = 64'b10101;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_17 = 64'b10111;
parameter    ap_const_lv64_38 = 64'b111000;
parameter    ap_const_lv64_41 = 64'b1000001;
parameter    ap_const_lv64_31 = 64'b110001;
parameter    ap_const_lv64_42 = 64'b1000010;
parameter    ap_const_lv64_30 = 64'b110000;
parameter    ap_const_lv64_18 = 64'b11000;
parameter    ap_const_lv64_1E = 64'b11110;
parameter    ap_const_lv64_19 = 64'b11001;
parameter    ap_const_lv64_1F = 64'b11111;
parameter    ap_const_lv64_1A = 64'b11010;
parameter    ap_const_lv64_20 = 64'b100000;
parameter    ap_const_lv64_1B = 64'b11011;
parameter    ap_const_lv64_21 = 64'b100001;
parameter    ap_const_lv64_1C = 64'b11100;
parameter    ap_const_lv64_22 = 64'b100010;
parameter    ap_const_lv64_1D = 64'b11101;
parameter    ap_const_lv64_23 = 64'b100011;
parameter    ap_const_lv64_3F = 64'b111111;
parameter    ap_const_lv64_3B = 64'b111011;
parameter    ap_const_lv64_40 = 64'b1000000;
parameter    ap_const_lv64_3C = 64'b111100;
parameter    ap_const_lv64_34 = 64'b110100;
parameter    ap_const_lv64_35 = 64'b110101;
parameter    ap_const_lv64_3A = 64'b111010;
parameter    ap_const_lv64_39 = 64'b111001;
parameter    ap_const_lv64_3D = 64'b111101;
parameter    ap_const_lv64_3E = 64'b111110;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv39_7FFFFFFFD4 = 39'b111111111111111111111111111111111010100;
parameter    ap_const_lv41_D4 = 41'b11010100;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv42_3FFFFFFFD90 = 42'b111111111111111111111111111111110110010000;
parameter    ap_const_lv43_5A8 = 43'b10110101000;
parameter    ap_const_lv42_3FFFFFFFCB8 = 42'b111111111111111111111111111111110010111000;
parameter    ap_const_lv44_FFFFFFFF36C = 44'b11111111111111111111111111111111001101101100;
parameter    ap_const_lv44_EDC = 44'b111011011100;
parameter    ap_const_lv46_3C90 = 46'b11110010010000;
parameter    ap_const_lv43_7FFFFFFFCB8 = 43'b1111111111111111111111111111111110010111000;
parameter    ap_const_lv43_7FFFFFFFD90 = 43'b1111111111111111111111111111111110110010000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv31_4800 = 31'b100100000000000;
parameter    ap_const_lv15_4800 = 15'b100100000000000;
parameter    ap_const_lv4_9 = 4'b1001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv43_234 = 43'b1000110100;
parameter    ap_const_lv35_0 = 35'b00000000000000000000000000000000000;
parameter    ap_const_lv29_1FFFFF80 = 29'b11111111111111111111110000000;
parameter    ap_const_lv29_80 = 29'b10000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_FFFFFF40 = 32'b11111111111111111111111101000000;
parameter    ap_const_lv32_C0 = 32'b11000000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv32_3000 = 32'b11000000000000;
parameter    ap_const_lv32_FFFFD000 = 32'b11111111111111111101000000000000;
parameter    ap_const_lv15_5000 = 15'b101000000000000;
parameter    ap_const_lv32_FFFFE310 = 32'b11111111111111111110001100010000;
parameter    ap_const_lv32_FFFFF9B0 = 32'b11111111111111111111100110110000;
parameter    ap_const_lv32_1CF0 = 32'b1110011110000;
parameter    ap_const_lv32_650 = 32'b11001010000;
parameter    ap_const_lv32_31E = 32'b1100011110;
parameter    ap_const_lv32_FFFFFF2A = 32'b11111111111111111111111100101010;
parameter    ap_const_lv31_5800 = 31'b101100000000000;
parameter    ap_const_lv15_3C00 = 15'b11110000000000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv15_5800 = 15'b101100000000000;
parameter    ap_const_lv4_B = 4'b1011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] buff_address0;
output   buff_ce0;
output   buff_we0;
output  [31:0] buff_d0;
input  [31:0] buff_q0;
output  [6:0] buff_address1;
output   buff_ce1;
output   buff_we1;
output  [31:0] buff_d1;
input  [31:0] buff_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] buff_address0;
reg buff_ce0;
reg buff_we0;
reg[31:0] buff_d0;
reg[6:0] buff_address1;
reg buff_ce1;
reg buff_we1;
reg[31:0] buff_d1;

(* fsm_encoding = "none" *) reg   [66:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [3:0] qq4_code4_table_s_address0;
reg    qq4_code4_table_s_ce0;
wire   [15:0] qq4_code4_table_s_q0;
wire   [3:0] wl_code_table_address0;
reg    wl_code_table_ce0;
wire   [12:0] wl_code_table_q0;
reg   [4:0] ilb_table_address0;
reg    ilb_table_ce0;
wire   [11:0] ilb_table_q0;
reg  signed [31:0] reg_1019;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state40;
wire   [0:0] ap_CS_fsm_state46;
wire   [0:0] ap_CS_fsm_state48;
wire   [0:0] ap_CS_fsm_state60;
reg  signed [31:0] reg_1026;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state50;
reg  signed [31:0] reg_1032;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state41;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_state47;
wire   [0:0] ap_CS_fsm_state51;
reg  signed [31:0] reg_1038;
wire   [0:0] ap_CS_fsm_state12;
reg  signed [31:0] reg_1044;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] ap_CS_fsm_state44;
reg  signed [31:0] reg_1050;
wire   [0:0] ap_CS_fsm_state13;
reg  signed [31:0] reg_1056;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state45;
reg  signed [31:0] reg_1062;
wire   [0:0] ap_CS_fsm_state14;
reg   [31:0] reg_1068;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state24;
reg   [31:0] reg_1075;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state23;
reg   [31:0] reg_1081;
wire   [0:0] ap_CS_fsm_state22;
wire   [63:0] grp_fu_1094_p2;
reg   [63:0] tmp_61_i_reg_3183;
wire   [63:0] grp_fu_1108_p2;
reg   [63:0] tmp_61_1_i_reg_3188;
wire   [6:0] buff_addr_26_reg_3193;
wire   [6:0] buff_addr_27_reg_3199;
wire   [63:0] tmp21_fu_1170_p2;
reg   [63:0] tmp21_reg_3244;
wire   [6:0] buff_addr_29_reg_3255;
wire   [63:0] grp_fu_1122_p2;
reg   [63:0] zl_reg_3289;
wire   [63:0] grp_fu_1136_p2;
reg   [63:0] tmp_61_2_i_reg_3294;
wire   [63:0] grp_fu_1150_p2;
reg   [63:0] tmp_61_3_i_reg_3299;
wire   [63:0] grp_fu_1164_p2;
reg   [63:0] tmp_61_4_i_reg_3304;
reg   [31:0] szl_reg_3331;
wire   [46:0] grp_fu_1188_p2;
reg   [46:0] pl_reg_3337;
wire   [46:0] grp_fu_1208_p2;
reg   [46:0] tmp_58_i_reg_3354;
reg   [31:0] spl_reg_3371;
reg   [31:0] buff_load_11_reg_3382;
reg   [31:0] buff_load_12_reg_3394;
wire   [0:0] ap_CS_fsm_state15;
reg   [31:0] buff_load_13_reg_3406;
reg   [31:0] buff_load_14_reg_3418;
wire   [0:0] ap_CS_fsm_state16;
reg   [31:0] buff_load_15_reg_3430;
reg   [31:0] buff_load_16_reg_3442;
wire   [0:0] ap_CS_fsm_state17;
reg   [31:0] buff_load_18_reg_3454;
reg   [31:0] buff_load_19_reg_3466;
wire   [0:0] ap_CS_fsm_state18;
reg   [31:0] buff_load_20_reg_3478;
reg   [31:0] buff_load_21_reg_3490;
wire   [0:0] ap_CS_fsm_state19;
reg   [31:0] buff_load_22_reg_3502;
reg   [31:0] buff_load_25_reg_3520;
wire   [6:0] tqmf_ptr_1_reg_3532;
wire   [6:0] buff_addr_30_reg_3537;
wire   [38:0] xb_fu_1261_p2;
reg   [38:0] xb_reg_3542;
wire   [40:0] tmp_7_fu_1281_p2;
reg   [40:0] tmp_7_reg_3547;
wire   [41:0] tmp_76_1_fu_1321_p2;
reg   [41:0] tmp_76_1_reg_3552;
wire   [41:0] tmp_73_3_fu_1340_p2;
reg   [41:0] tmp_73_3_reg_3557;
wire   [43:0] tmp_76_3_fu_1349_p2;
reg   [43:0] tmp_76_3_reg_3562;
wire   [43:0] tmp_73_4_fu_1358_p2;
reg   [43:0] tmp_73_4_reg_3567;
wire   [45:0] tmp_76_4_fu_1367_p2;
reg   [45:0] tmp_76_4_reg_3572;
wire   [45:0] tmp_73_5_fu_1376_p2;
reg   [45:0] tmp_73_5_reg_3577;
wire   [43:0] tmp_73_6_fu_1398_p2;
reg   [43:0] tmp_73_6_reg_3582;
wire   [42:0] tmp_73_8_fu_1429_p2;
reg   [42:0] tmp_73_8_reg_3587;
wire   [38:0] tmp_76_9_fu_1452_p2;
reg   [38:0] tmp_76_9_reg_3592;
wire   [38:0] tmp_8_fu_1462_p2;
reg   [38:0] tmp_8_reg_3597;
wire   [42:0] tmp1_fu_1468_p2;
reg   [42:0] tmp1_reg_3602;
wire   [38:0] tmp6_fu_1474_p2;
reg   [38:0] tmp6_reg_3607;
wire   [44:0] tmp13_fu_1514_p2;
reg   [44:0] tmp13_reg_3612;
wire   [42:0] tmp18_fu_1520_p2;
reg   [42:0] tmp18_reg_3617;
reg   [31:0] xl_reg_3638;
reg   [31:0] xh_reg_3643;
wire   [31:0] sl_fu_1837_p2;
reg   [31:0] sl_reg_3648;
reg   [31:0] buff_load_45_reg_3654;
wire   [31:0] el_fu_1841_p2;
reg   [31:0] el_reg_3660;
wire   [5:0] grp_quantl_fu_1009_ap_return;
reg   [5:0] il_assign_reg_3665;
wire   [0:0] ap_CS_fsm_state25;
wire    grp_quantl_fu_1009_ap_done;
reg   [15:0] qq4_code4_table_loa_reg_3680;
wire   [0:0] ap_CS_fsm_state26;
wire   [14:0] tmp_46_fu_1934_p1;
reg   [14:0] tmp_46_reg_3685;
wire   [0:0] tmp_50_i_fu_1938_p2;
reg   [0:0] tmp_50_i_reg_3690;
reg   [31:0] dlt_reg_3695;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state35;
wire   [14:0] nbl_assign_2_fu_1971_p3;
reg   [14:0] nbl_assign_2_reg_3707;
reg   [3:0] wd2_cast_reg_3712;
wire   [31:0] plt_fu_2034_p2;
reg   [31:0] plt_reg_3722;
wire   [0:0] ap_CS_fsm_state37;
wire   [31:0] rlt_fu_2038_p2;
reg   [31:0] rlt_reg_3728;
wire   [0:0] ap_CS_fsm_state39;
wire   [63:0] grp_fu_2050_p2;
reg   [63:0] tmp_61_i1_reg_3813;
wire   [63:0] grp_fu_2064_p2;
reg   [63:0] tmp_61_1_i1_reg_3818;
wire   [6:0] buff_addr_35_reg_3823;
wire   [6:0] buff_addr_36_reg_3829;
wire   [63:0] tmp34_fu_2126_p2;
reg   [63:0] tmp34_reg_3875;
wire   [6:0] buff_addr_38_reg_3886;
wire   [6:0] buff_addr_34_reg_3898;
wire   [63:0] grp_fu_2078_p2;
reg   [63:0] zl_1_reg_3903;
wire   [63:0] grp_fu_2092_p2;
reg   [63:0] tmp_61_2_i1_reg_3908;
wire   [63:0] grp_fu_2106_p2;
reg   [63:0] tmp_61_3_i1_reg_3913;
wire   [63:0] grp_fu_2120_p2;
reg   [63:0] tmp_61_4_i1_reg_3918;
wire  signed [63:0] tmp_i4_fu_2170_p1;
wire   [0:0] ap_CS_fsm_state49;
reg   [31:0] szh_reg_3959;
wire   [6:0] buff_addr_39_reg_3965;
wire   [63:0] grp_fu_2144_p2;
reg   [63:0] pl_3_reg_3970;
wire   [63:0] grp_fu_2164_p2;
reg   [63:0] tmp_58_i1_reg_3975;
wire   [6:0] buff_addr_40_reg_3980;
reg   [0:0] tmp_47_reg_3985;
wire   [63:0] grp_fu_2187_p2;
reg   [63:0] tmp_6_i_reg_3991;
reg   [31:0] sph_reg_3996;
wire   [42:0] tmp_19_fu_2248_p2;
reg   [42:0] tmp_19_reg_4001;
wire   [31:0] apl2_fu_2368_p2;
reg   [31:0] apl2_reg_4006;
wire   [0:0] ap_CS_fsm_state52;
wire   [31:0] apl1_fu_2409_p2;
reg   [31:0] apl1_reg_4012;
wire   [31:0] sh_fu_2415_p2;
reg   [31:0] sh_reg_4018;
wire   [1:0] p_ih_t_fu_2489_p2;
reg   [1:0] p_ih_t_reg_4023;
wire   [14:0] apl2_assign_fu_2517_p3;
reg   [14:0] apl2_assign_reg_4030;
wire   [0:0] ap_CS_fsm_state53;
wire   [31:0] tmp_23_fu_2525_p6;
reg  signed [31:0] tmp_23_reg_4036;
wire   [14:0] tmp_59_fu_2621_p1;
reg   [14:0] tmp_59_reg_4041;
wire   [0:0] tmp_53_i_fu_2625_p2;
reg   [0:0] tmp_53_i_reg_4046;
wire   [15:0] apl1_3_fu_2680_p3;
reg   [15:0] apl1_3_reg_4051;
wire   [0:0] ap_CS_fsm_state54;
reg   [3:0] wd2_4_cast_reg_4066;
wire   [0:0] ap_CS_fsm_state55;
reg   [31:0] dh_1_reg_4076;
wire   [0:0] ap_CS_fsm_state56;
wire   [31:0] ph_fu_2779_p2;
reg   [31:0] ph_reg_4083;
wire   [0:0] ap_CS_fsm_state57;
wire   [31:0] yh_fu_2783_p2;
reg   [31:0] yh_reg_4089;
wire   [0:0] ap_CS_fsm_state59;
wire  signed [63:0] tmp_i1_fu_2787_p1;
wire   [0:0] ap_CS_fsm_state61;
reg   [0:0] tmp_60_reg_4122;
wire   [0:0] ap_CS_fsm_state63;
wire   [63:0] grp_fu_2804_p2;
reg   [63:0] tmp_6_i1_reg_4128;
wire   [31:0] apl2_1_fu_2932_p2;
reg   [31:0] apl2_1_reg_4133;
wire   [0:0] ap_CS_fsm_state64;
wire   [31:0] apl1_4_fu_2973_p2;
reg   [31:0] apl1_4_reg_4139;
wire   [14:0] apl2_assign_1_fu_3001_p3;
reg   [14:0] apl2_assign_1_reg_4145;
wire   [0:0] ap_CS_fsm_state65;
wire   [7:0] tmp_30_fu_3020_p2;
reg   [7:0] tmp_30_reg_4151;
reg   [23:0] tmp_31_reg_4156;
wire   [15:0] apl1_7_fu_3081_p3;
reg   [15:0] apl1_7_reg_4161;
wire   [0:0] ap_CS_fsm_state66;
wire    grp_upzero_fu_996_ap_start;
wire    grp_upzero_fu_996_ap_done;
wire    grp_upzero_fu_996_ap_idle;
wire    grp_upzero_fu_996_ap_ready;
reg   [31:0] grp_upzero_fu_996_dlt;
wire   [6:0] grp_upzero_fu_996_dlti_address0;
wire    grp_upzero_fu_996_dlti_ce0;
wire    grp_upzero_fu_996_dlti_we0;
wire   [31:0] grp_upzero_fu_996_dlti_d0;
wire   [6:0] grp_upzero_fu_996_dlti_address1;
wire    grp_upzero_fu_996_dlti_ce1;
wire    grp_upzero_fu_996_dlti_we1;
wire   [31:0] grp_upzero_fu_996_dlti_d1;
reg   [6:0] grp_upzero_fu_996_dlti_offset;
reg   [6:0] grp_upzero_fu_996_bli_offset;
wire    grp_quantl_fu_1009_ap_start;
wire    grp_quantl_fu_1009_ap_idle;
wire    grp_quantl_fu_1009_ap_ready;
reg    ap_reg_grp_upzero_fu_996_ap_start;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state58;
reg    ap_reg_grp_quantl_fu_1009_ap_start;
wire   [63:0] tmp_13_fu_1856_p1;
wire   [63:0] tmp_i3_fu_1997_p1;
wire   [63:0] tmp_i9_fu_2736_p1;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] ap_CS_fsm_state29;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
wire   [31:0] il_assign_1_fu_1967_p1;
wire   [0:0] ap_CS_fsm_state36;
wire   [31:0] nbl_assign_2_cast_fu_2002_p1;
wire   [31:0] tmp_27_i_cast_fu_2029_p1;
wire  signed [31:0] apl2_assign_cast_fu_2631_p1;
wire  signed [31:0] apl1_3_cast_fu_2701_p1;
wire   [31:0] nbl_assign_3_cast_fu_2711_p1;
wire   [31:0] tmp_27_i1_cast_fu_2774_p1;
wire   [0:0] ap_CS_fsm_state67;
wire  signed [31:0] apl2_assign_1_cast_fu_3089_p1;
wire  signed [31:0] apl1_7_cast_fu_3093_p1;
wire  signed [31:0] tmp_43_fu_1174_p2;
wire  signed [31:0] tmp_44_fu_1194_p2;
wire   [63:0] tmp23_fu_1218_p2;
wire   [63:0] tmp24_fu_1222_p2;
wire   [63:0] tmp22_fu_1214_p2;
wire   [63:0] zl_1_4_i_fu_1227_p2;
wire   [46:0] pl_1_fu_1243_p2;
wire  signed [31:0] xb_fu_1261_p1;
wire  signed [31:0] tmp_s_fu_1271_p1;
wire  signed [31:0] tmp_7_fu_1281_p1;
wire   [37:0] p_shl2_fu_1287_p3;
wire   [35:0] p_shl3_fu_1299_p3;
wire  signed [38:0] p_shl2_cast_fu_1295_p1;
wire  signed [38:0] p_shl3_cast_fu_1307_p1;
wire  signed [31:0] tmp_76_1_fu_1321_p1;
wire  signed [31:0] tmp_76_2_fu_1331_p1;
wire  signed [31:0] tmp_73_3_fu_1340_p1;
wire  signed [31:0] tmp_76_3_fu_1349_p1;
wire  signed [31:0] tmp_73_4_fu_1358_p1;
wire  signed [31:0] tmp_76_4_fu_1367_p1;
wire  signed [31:0] tmp_73_5_fu_1376_p1;
wire  signed [31:0] tmp_76_5_fu_1385_p1;
wire   [43:0] tmp_76_5_fu_1385_p2;
wire  signed [31:0] tmp_73_6_fu_1398_p1;
wire  signed [31:0] tmp_76_6_fu_1407_p1;
wire   [42:0] tmp_76_6_fu_1407_p2;
wire  signed [31:0] tmp_73_7_fu_1420_p1;
wire  signed [31:0] tmp_73_8_fu_1429_p1;
wire  signed [31:0] tmp_73_9_fu_1438_p1;
wire   [40:0] tmp_73_9_fu_1438_p2;
wire  signed [31:0] tmp_76_9_fu_1452_p1;
wire  signed [31:0] tmp_8_fu_1462_p1;
wire  signed [42:0] tmp_73_9_cast_fu_1444_p1;
wire   [42:0] tmp_73_7_fu_1420_p2;
wire   [38:0] tmp_s_fu_1271_p2;
wire   [38:0] tmp_73_1_fu_1311_p2;
wire   [35:0] p_shl6_fu_1480_p3;
wire   [33:0] p_shl7_fu_1492_p3;
wire  signed [36:0] p_shl6_cast_fu_1488_p1;
wire  signed [36:0] p_shl7_cast_fu_1500_p1;
wire   [36:0] tmp_9_fu_1504_p2;
wire  signed [44:0] tmp_76_6_cast_fu_1413_p1;
wire  signed [44:0] tmp_76_5_cast_fu_1391_p1;
wire   [42:0] tmp_76_2_fu_1331_p2;
wire  signed [42:0] tmp_64_cast_fu_1510_p1;
wire   [35:0] p_shl_fu_1526_p3;
wire   [33:0] p_shl1_fu_1538_p3;
wire  signed [36:0] p_shl_cast_fu_1534_p1;
wire  signed [36:0] p_shl1_cast_fu_1546_p1;
wire   [36:0] xa_fu_1550_p2;
wire   [38:0] tmp_73_2_fu_1566_p3;
wire   [38:0] tmp_76_7_fu_1593_p3;
wire   [37:0] p_shl4_fu_1607_p3;
wire   [35:0] p_shl5_fu_1619_p3;
wire  signed [38:0] p_shl4_cast_fu_1615_p1;
wire  signed [38:0] p_shl5_cast_fu_1627_p1;
wire   [38:0] tmp_76_8_fu_1631_p2;
wire  signed [43:0] tmp23_cast_fu_1647_p1;
wire  signed [43:0] tmp_73_8_cast_fu_1604_p1;
wire   [43:0] tmp2_fu_1650_p2;
wire  signed [46:0] tmp_73_6_cast_fu_1590_p1;
wire  signed [46:0] tmp_73_5_cast_fu_1587_p1;
wire   [46:0] tmp3_fu_1660_p2;
wire  signed [46:0] tmp_73_4_cast_fu_1581_p1;
wire   [46:0] tmp4_fu_1666_p2;
wire  signed [46:0] tmp22_cast_fu_1656_p1;
wire  signed [39:0] tmp28_cast_fu_1678_p1;
wire  signed [39:0] xa_cast_fu_1556_p1;
wire   [39:0] tmp7_fu_1681_p2;
wire  signed [39:0] tmp_73_2_cast_fu_1574_p1;
wire  signed [39:0] tmp_62_cast_fu_1644_p1;
wire   [39:0] tmp8_fu_1691_p2;
wire  signed [41:0] tmp30_cast_fu_1697_p1;
wire   [41:0] tmp9_fu_1701_p2;
wire  signed [42:0] tmp29_cast_fu_1706_p1;
wire  signed [42:0] tmp27_cast_fu_1687_p1;
wire   [42:0] tmp10_fu_1710_p2;
wire  signed [46:0] tmp26_cast_fu_1716_p1;
wire   [46:0] tmp5_fu_1672_p2;
wire   [46:0] xa_1_fu_1720_p2;
wire  signed [39:0] tmp_76_9_cast_fu_1641_p1;
wire  signed [39:0] tmp_76_7_cast_fu_1600_p1;
wire   [39:0] tmp11_fu_1730_p2;
wire  signed [39:0] tmp_76_8_cast_fu_1637_p1;
wire   [39:0] tmp12_fu_1736_p2;
wire  signed [46:0] tmp35_cast_fu_1746_p1;
wire  signed [46:0] tmp_76_4_cast_fu_1584_p1;
wire   [46:0] tmp14_fu_1749_p2;
wire  signed [46:0] tmp32_cast_fu_1742_p1;
wire  signed [41:0] tmp_76_cast_fu_1563_p1;
wire   [41:0] tmp16_fu_1761_p2;
wire  signed [41:0] xb_cast_fu_1560_p1;
wire   [41:0] tmp17_fu_1766_p2;
wire  signed [44:0] tmp40_cast_fu_1776_p1;
wire  signed [44:0] tmp_76_3_cast_fu_1578_p1;
wire   [44:0] tmp19_fu_1779_p2;
wire  signed [44:0] tmp37_cast_fu_1772_p1;
wire   [44:0] tmp20_fu_1785_p2;
wire  signed [46:0] tmp36_cast_fu_1791_p1;
wire   [46:0] tmp15_fu_1755_p2;
wire   [46:0] xb_1_fu_1795_p2;
wire   [46:0] tmp_10_fu_1805_p2;
wire   [47:0] xa_1_cast_fu_1726_p1;
wire   [47:0] xb_1_cast_fu_1801_p1;
wire   [47:0] tmp_11_fu_1821_p2;
wire   [3:0] tmp_12_fu_1846_p4;
wire   [38:0] p_shl_i_fu_1865_p3;
wire  signed [38:0] tmp_i2_cast_fu_1862_p1;
wire   [38:0] tmp_i2_fu_1872_p2;
wire  signed [31:0] wl_code_table_load_c_fu_1888_p1;
wire   [31:0] tmp_47_i_fu_1878_p4;
wire   [30:0] tmp_15_fu_1896_p4;
wire  signed [30:0] tmp_fu_1892_p1;
wire   [31:0] nbl_assign_1_fu_1906_p2;
wire   [0:0] tmp_45_fu_1918_p3;
wire   [30:0] nbl_assign_1_cast_fu_1912_p2;
wire   [30:0] p_i_fu_1926_p3;
wire  signed [31:0] tmp_14_fu_1951_p0;
wire  signed [15:0] tmp_14_fu_1951_p1;
wire   [46:0] tmp_14_fu_1951_p2;
wire   [4:0] wd1_fu_1977_p4;
wire   [3:0] tmp_26_i_fu_2006_p2;
wire   [11:0] tmp_26_i_cast_cast_fu_2011_p1;
wire   [11:0] wd3_fu_2015_p2;
wire   [14:0] tmp_27_i_fu_2021_p3;
wire  signed [31:0] tmp_53_fu_2130_p2;
wire  signed [31:0] tmp_54_fu_2150_p2;
wire  signed [31:0] grp_fu_2177_p1;
wire  signed [31:0] grp_fu_2187_p1;
wire   [63:0] tmp36_fu_2197_p2;
wire   [63:0] tmp37_fu_2201_p2;
wire   [63:0] tmp35_fu_2193_p2;
wire   [63:0] zl_1_4_i1_fu_2206_p2;
wire   [63:0] grp_fu_2177_p2;
wire   [63:0] pl_4_fu_2230_p2;
wire  signed [31:0] tmp_19_fu_2248_p1;
wire   [33:0] wd2_fu_2258_p3;
wire  signed [34:0] wd2_1_cast_fu_2266_p1;
wire   [26:0] tmp_16_fu_2276_p4;
wire   [38:0] p_shl_i1_fu_2301_p3;
wire   [39:0] p_shl_i1_cast_fu_2309_p1;
wire  signed [39:0] tmp_9_i_cast_fu_2297_p1;
wire   [39:0] tmp_10_i_fu_2313_p2;
wire   [34:0] wd2_1_fu_2270_p2;
wire  signed [27:0] tmp_17_fu_2286_p1;
wire   [27:0] tmp_49_fu_2329_p4;
wire   [27:0] tmp_50_fu_2339_p3;
wire   [0:0] tmp_48_fu_2290_p3;
wire  signed [28:0] tmp_13_i_cast_fu_2346_p1;
wire   [28:0] tmp_15_i_cast_cast_fu_2350_p3;
wire   [28:0] tmp33_fu_2358_p2;
wire  signed [31:0] tmp33_cast_fu_2364_p1;
wire   [31:0] tmp_12_i_fu_2319_p4;
wire   [39:0] p_shl_i2_fu_2374_p3;
wire   [40:0] p_shl_i2_cast_fu_2382_p1;
wire  signed [40:0] tmp_i4_cast_fu_2254_p1;
wire   [40:0] tmp_i5_fu_2386_p2;
wire   [31:0] apl_v_i_cast_cast_fu_2402_p3;
wire   [31:0] tmp_22_i_fu_2392_p4;
wire   [31:0] eh_fu_2419_p2;
wire   [0:0] tmp_55_fu_2424_p3;
wire   [30:0] tmp_20_fu_2440_p4;
wire   [0:0] tmp_56_fu_2453_p3;
wire   [31:0] m_fu_2461_p2;
wire   [31:0] n_assign_1_fu_2467_p3;
wire  signed [31:0] decis_fu_2449_p1;
wire   [0:0] tmp_21_fu_2475_p2;
wire   [1:0] tmp_22_fu_2481_p3;
wire   [1:0] tmp_18_fu_2432_p3;
wire   [0:0] tmp_16_i_fu_2495_p2;
wire   [31:0] p_i1_fu_2500_p3;
wire   [0:0] tmp_17_i1_fu_2511_p2;
wire   [14:0] tmp_51_fu_2507_p1;
wire   [38:0] p_shl_i3_fu_2542_p3;
wire  signed [38:0] tmp_i8_cast_fu_2538_p1;
wire   [38:0] tmp_i8_fu_2550_p2;
wire   [31:0] tmp_25_fu_2566_p6;
wire   [31:0] wd_fu_2556_p4;
wire   [30:0] tmp_26_fu_2583_p4;
wire   [30:0] tmp_57_fu_2579_p1;
wire   [31:0] nbh_assign_1_fu_2593_p2;
wire   [0:0] tmp_58_fu_2605_p3;
wire   [30:0] nbh_assign_1_cast_fu_2599_p2;
wire   [30:0] p_i2_fu_2613_p3;
wire   [14:0] apl1_8_fu_2635_p2;
wire   [31:0] apl1_8_cast_fu_2644_p1;
wire   [0:0] tmp_23_i_fu_2648_p2;
wire   [31:0] wd3_0_apl1_i_fu_2653_p3;
wire   [15:0] apl1_8_cast1_fu_2640_p1;
wire   [15:0] apl1_2_fu_2664_p2;
wire  signed [31:0] apl1_2_cast_fu_2670_p1;
wire   [0:0] tmp_24_i_fu_2674_p2;
wire   [15:0] tmp_52_fu_2660_p1;
wire   [14:0] nbl_assign_3_fu_2705_p3;
wire   [4:0] wd1_1_fu_2716_p4;
wire   [46:0] grp_fu_2695_p2;
wire   [3:0] tmp_26_i1_fu_2751_p2;
wire   [11:0] tmp_26_i1_cast_cast_fu_2756_p1;
wire   [11:0] wd3_2_fu_2760_p2;
wire   [14:0] tmp_27_i1_fu_2766_p3;
wire  signed [31:0] grp_fu_2794_p1;
wire  signed [31:0] grp_fu_2804_p1;
wire   [63:0] grp_fu_2794_p2;
wire   [33:0] wd2_2_fu_2822_p3;
wire  signed [34:0] wd2_5_cast_fu_2830_p1;
wire   [26:0] tmp_27_fu_2840_p4;
wire   [38:0] p_shl_i4_fu_2865_p3;
wire   [39:0] p_shl_i4_cast_fu_2873_p1;
wire  signed [39:0] tmp_9_i1_cast_fu_2861_p1;
wire   [39:0] tmp_10_i1_fu_2877_p2;
wire   [34:0] wd2_3_fu_2834_p2;
wire  signed [27:0] tmp_28_fu_2850_p1;
wire   [27:0] tmp_62_fu_2893_p4;
wire   [27:0] tmp_63_fu_2903_p3;
wire   [0:0] tmp_61_fu_2854_p3;
wire  signed [28:0] tmp_13_i1_cast_fu_2910_p1;
wire   [28:0] tmp_15_i1_cast_cast_fu_2914_p3;
wire   [28:0] tmp45_fu_2922_p2;
wire  signed [31:0] tmp45_cast_fu_2928_p1;
wire   [31:0] tmp_12_i1_fu_2883_p4;
wire   [39:0] p_shl_i5_fu_2938_p3;
wire   [40:0] p_shl_i5_cast_fu_2946_p1;
wire  signed [40:0] tmp_i10_cast_fu_2818_p1;
wire   [40:0] tmp_i10_fu_2950_p2;
wire   [31:0] apl_v_i1_cast_cast_fu_2966_p3;
wire   [31:0] tmp_22_i1_fu_2956_p4;
wire   [0:0] tmp_16_i2_fu_2979_p2;
wire   [31:0] p_i3_fu_2984_p3;
wire   [0:0] tmp_17_i3_fu_2995_p2;
wire   [14:0] tmp_64_fu_2991_p1;
wire   [7:0] tmp_66_fu_3016_p1;
wire   [7:0] tmp_29_fu_3009_p3;
wire   [14:0] apl1_9_fu_3036_p2;
wire   [31:0] apl1_9_cast_fu_3045_p1;
wire   [0:0] tmp_23_i1_fu_3049_p2;
wire   [31:0] wd3_0_apl1_i1_fu_3054_p3;
wire   [15:0] apl1_9_cast1_fu_3041_p1;
wire   [15:0] apl1_6_fu_3065_p2;
wire  signed [31:0] apl1_6_cast_fu_3071_p1;
wire   [0:0] tmp_24_i1_fu_3075_p2;
wire   [15:0] tmp_65_fu_3061_p1;
reg   [66:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 67'b1;
#0 ap_reg_grp_upzero_fu_996_ap_start = 1'b0;
#0 ap_reg_grp_quantl_fu_1009_ap_start = 1'b0;
end

encode_qq4_code4_eOg #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
qq4_code4_table_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(qq4_code4_table_s_address0),
    .ce0(qq4_code4_table_s_ce0),
    .q0(qq4_code4_table_s_q0)
);

encode_wl_code_tafYi #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wl_code_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wl_code_table_address0),
    .ce0(wl_code_table_ce0),
    .q0(wl_code_table_q0)
);

encode_ilb_table #(
    .DataWidth( 12 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ilb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ilb_table_address0),
    .ce0(ilb_table_ce0),
    .q0(ilb_table_q0)
);

upzero grp_upzero_fu_996(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_upzero_fu_996_ap_start),
    .ap_done(grp_upzero_fu_996_ap_done),
    .ap_idle(grp_upzero_fu_996_ap_idle),
    .ap_ready(grp_upzero_fu_996_ap_ready),
    .dlt(grp_upzero_fu_996_dlt),
    .dlti_address0(grp_upzero_fu_996_dlti_address0),
    .dlti_ce0(grp_upzero_fu_996_dlti_ce0),
    .dlti_we0(grp_upzero_fu_996_dlti_we0),
    .dlti_d0(grp_upzero_fu_996_dlti_d0),
    .dlti_q0(buff_q0),
    .dlti_address1(grp_upzero_fu_996_dlti_address1),
    .dlti_ce1(grp_upzero_fu_996_dlti_ce1),
    .dlti_we1(grp_upzero_fu_996_dlti_we1),
    .dlti_d1(grp_upzero_fu_996_dlti_d1),
    .dlti_q1(buff_q1),
    .dlti_offset(grp_upzero_fu_996_dlti_offset),
    .bli_offset(grp_upzero_fu_996_bli_offset)
);

quantl grp_quantl_fu_1009(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_quantl_fu_1009_ap_start),
    .ap_done(grp_quantl_fu_1009_ap_done),
    .ap_idle(grp_quantl_fu_1009_ap_idle),
    .ap_ready(grp_quantl_fu_1009_ap_ready),
    .el(el_reg_3660),
    .detl(reg_1081),
    .ap_return(grp_quantl_fu_1009_ap_return)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1032),
    .din1(reg_1038),
    .ce(1'b1),
    .dout(grp_fu_1094_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1044),
    .din1(reg_1050),
    .ce(1'b1),
    .dout(grp_fu_1108_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1019),
    .din1(reg_1026),
    .ce(1'b1),
    .dout(grp_fu_1122_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1032),
    .din1(reg_1038),
    .ce(1'b1),
    .dout(grp_fu_1136_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1044),
    .din1(reg_1050),
    .ce(1'b1),
    .dout(grp_fu_1150_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1056),
    .din1(reg_1062),
    .ce(1'b1),
    .dout(grp_fu_1164_p2)
);

encode_mul_32s_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
encode_mul_32s_32g8j_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_43_fu_1174_p2),
    .din1(reg_1026),
    .ce(1'b1),
    .dout(grp_fu_1188_p2)
);

encode_mul_32s_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
encode_mul_32s_32g8j_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_44_fu_1194_p2),
    .din1(reg_1026),
    .ce(1'b1),
    .dout(grp_fu_1208_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1032),
    .din1(reg_1038),
    .ce(1'b1),
    .dout(grp_fu_2050_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1044),
    .din1(reg_1050),
    .ce(1'b1),
    .dout(grp_fu_2064_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1019),
    .din1(reg_1026),
    .ce(1'b1),
    .dout(grp_fu_2078_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1032),
    .din1(reg_1038),
    .ce(1'b1),
    .dout(grp_fu_2092_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1044),
    .din1(reg_1050),
    .ce(1'b1),
    .dout(grp_fu_2106_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1056),
    .din1(reg_1062),
    .ce(1'b1),
    .dout(grp_fu_2120_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_53_fu_2130_p2),
    .din1(reg_1026),
    .ce(1'b1),
    .dout(grp_fu_2144_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_54_fu_2150_p2),
    .din1(reg_1038),
    .ce(1'b1),
    .dout(grp_fu_2164_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1019),
    .din1(grp_fu_2177_p1),
    .ce(1'b1),
    .dout(grp_fu_2177_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1026),
    .din1(grp_fu_2187_p1),
    .ce(1'b1),
    .dout(grp_fu_2187_p2)
);

encode_mux_42_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
encode_mux_42_32_1_U33(
    .din1(ap_const_lv32_FFFFE310),
    .din2(ap_const_lv32_FFFFF9B0),
    .din3(ap_const_lv32_1CF0),
    .din4(ap_const_lv32_650),
    .din5(p_ih_t_reg_4023),
    .dout(tmp_23_fu_2525_p6)
);

encode_mux_42_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
encode_mux_42_32_1_U34(
    .din1(ap_const_lv32_31E),
    .din2(ap_const_lv32_FFFFFF2A),
    .din3(ap_const_lv32_31E),
    .din4(ap_const_lv32_FFFFFF2A),
    .din5(p_ih_t_reg_4023),
    .dout(tmp_25_fu_2566_p6)
);

encode_mul_32s_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
encode_mul_32s_32g8j_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1026),
    .din1(tmp_23_reg_4036),
    .ce(1'b1),
    .dout(grp_fu_2695_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1019),
    .din1(grp_fu_2794_p1),
    .ce(1'b1),
    .dout(grp_fu_2794_p2)
);

encode_mul_32s_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encode_mul_32s_32dEe_x_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1026),
    .din1(grp_fu_2804_p1),
    .ce(1'b1),
    .dout(grp_fu_2804_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_quantl_fu_1009_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_reg_grp_quantl_fu_1009_ap_start <= 1'b1;
        end else if ((1'b1 == grp_quantl_fu_1009_ap_ready)) begin
            ap_reg_grp_quantl_fu_1009_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_upzero_fu_996_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state57))) begin
            ap_reg_grp_upzero_fu_996_ap_start <= 1'b1;
        end else if ((1'b1 == grp_upzero_fu_996_ap_ready)) begin
            ap_reg_grp_upzero_fu_996_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        reg_1019 <= buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state60))) begin
        reg_1019 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        reg_1026 <= buff_q0;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state50))) begin
        reg_1026 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state47))) begin
        reg_1032 <= buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state51))) begin
        reg_1032 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state47))) begin
        reg_1038 <= buff_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_1038 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_1044 <= buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_1044 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_1050 <= buff_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_1050 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        reg_1056 <= buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_1056 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        reg_1062 <= buff_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_1062 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        reg_1068 <= buff_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        reg_1068 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        apl1_3_reg_4051 <= apl1_3_fu_2680_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        apl1_4_reg_4139 <= apl1_4_fu_2973_p2;
        apl2_1_reg_4133 <= apl2_1_fu_2932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        apl1_7_reg_4161 <= apl1_7_fu_3081_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        apl1_reg_4012 <= apl1_fu_2409_p2;
        apl2_reg_4006 <= apl2_fu_2368_p2;
        p_ih_t_reg_4023 <= p_ih_t_fu_2489_p2;
        sh_reg_4018 <= sh_fu_2415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        apl2_assign_1_reg_4145 <= apl2_assign_1_fu_3001_p3;
        tmp_30_reg_4151 <= tmp_30_fu_3020_p2;
        tmp_31_reg_4156 <= {{buff_q1[ap_const_lv32_1F : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        apl2_assign_reg_4030 <= apl2_assign_fu_2517_p3;
        tmp_23_reg_4036 <= tmp_23_fu_2525_p6;
        tmp_53_i_reg_4046 <= tmp_53_i_fu_2625_p2;
        tmp_59_reg_4041 <= tmp_59_fu_2621_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buff_load_11_reg_3382 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buff_load_12_reg_3394 <= buff_q1;
        buff_load_13_reg_3406 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buff_load_14_reg_3418 <= buff_q1;
        buff_load_15_reg_3430 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        buff_load_16_reg_3442 <= buff_q1;
        buff_load_18_reg_3454 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buff_load_19_reg_3466 <= buff_q1;
        buff_load_20_reg_3478 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buff_load_21_reg_3490 <= buff_q1;
        buff_load_22_reg_3502 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buff_load_25_reg_3520 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buff_load_45_reg_3654 <= buff_q0;
        sl_reg_3648 <= sl_fu_1837_p2;
        xh_reg_3643 <= {{tmp_11_fu_1821_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
        xl_reg_3638 <= {{tmp_10_fu_1805_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        dh_1_reg_4076 <= {{grp_fu_2695_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        dlt_reg_3695 <= {{tmp_14_fu_1951_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        el_reg_3660 <= el_fu_1841_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done))) begin
        il_assign_reg_3665 <= grp_quantl_fu_1009_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        nbl_assign_2_reg_3707 <= nbl_assign_2_fu_1971_p3;
        wd2_cast_reg_3712 <= {{nbl_assign_2_fu_1971_p3[ap_const_lv32_E : ap_const_lv32_B]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        ph_reg_4083 <= ph_fu_2779_p2;
        yh_reg_4089 <= yh_fu_2783_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        pl_3_reg_3970 <= grp_fu_2144_p2;
        tmp_58_i1_reg_3975 <= grp_fu_2164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pl_reg_3337 <= grp_fu_1188_p2;
        szl_reg_3331 <= {{zl_1_4_i_fu_1227_p2[ap_const_lv32_2D : ap_const_lv32_E]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        plt_reg_3722 <= plt_fu_2034_p2;
        rlt_reg_3728 <= rlt_fu_2038_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        qq4_code4_table_loa_reg_3680 <= qq4_code4_table_s_q0;
        tmp_46_reg_3685 <= tmp_46_fu_1934_p1;
        tmp_50_i_reg_3690 <= tmp_50_i_fu_1938_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_1075 <= buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_1081 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        sph_reg_3996 <= {{pl_4_fu_2230_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
        tmp_19_reg_4001 <= tmp_19_fu_2248_p2;
        tmp_47_reg_3985 <= grp_fu_2177_p2[ap_const_lv32_3F];
        tmp_6_i_reg_3991 <= grp_fu_2187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        spl_reg_3371 <= {{pl_1_fu_1243_p2[ap_const_lv32_2E : ap_const_lv32_F]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        szh_reg_3959 <= {{zl_1_4_i1_fu_2206_p2[ap_const_lv32_2D : ap_const_lv32_E]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp13_reg_3612 <= tmp13_fu_1514_p2;
        tmp18_reg_3617 <= tmp18_fu_1520_p2;
        tmp1_reg_3602 <= tmp1_fu_1468_p2;
        tmp6_reg_3607 <= tmp6_fu_1474_p2;
        tmp_73_3_reg_3557 <= tmp_73_3_fu_1340_p2;
        tmp_73_4_reg_3567 <= tmp_73_4_fu_1358_p2;
        tmp_73_5_reg_3577 <= tmp_73_5_fu_1376_p2;
        tmp_73_6_reg_3582 <= tmp_73_6_fu_1398_p2;
        tmp_73_8_reg_3587 <= tmp_73_8_fu_1429_p2;
        tmp_76_1_reg_3552 <= tmp_76_1_fu_1321_p2;
        tmp_76_3_reg_3562 <= tmp_76_3_fu_1349_p2;
        tmp_76_4_reg_3572 <= tmp_76_4_fu_1367_p2;
        tmp_76_9_reg_3592 <= tmp_76_9_fu_1452_p2;
        tmp_7_reg_3547 <= tmp_7_fu_1281_p2;
        tmp_8_reg_3597 <= tmp_8_fu_1462_p2;
        xb_reg_3542 <= xb_fu_1261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp21_reg_3244 <= tmp21_fu_1170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp34_reg_3875 <= tmp34_fu_2126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_58_i_reg_3354 <= grp_fu_1208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_60_reg_4122 <= grp_fu_2794_p2[ap_const_lv32_3F];
        tmp_6_i1_reg_4128 <= grp_fu_2804_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        tmp_61_1_i1_reg_3818 <= grp_fu_2064_p2;
        tmp_61_i1_reg_3813 <= grp_fu_2050_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_61_1_i_reg_3188 <= grp_fu_1108_p2;
        tmp_61_i_reg_3183 <= grp_fu_1094_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_61_2_i1_reg_3908 <= grp_fu_2092_p2;
        tmp_61_3_i1_reg_3913 <= grp_fu_2106_p2;
        tmp_61_4_i1_reg_3918 <= grp_fu_2120_p2;
        zl_1_reg_3903 <= grp_fu_2078_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_61_2_i_reg_3294 <= grp_fu_1136_p2;
        tmp_61_3_i_reg_3299 <= grp_fu_1150_p2;
        tmp_61_4_i_reg_3304 <= grp_fu_1164_p2;
        zl_reg_3289 <= grp_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        wd2_4_cast_reg_4066 <= {{nbl_assign_3_fu_2705_p3[ap_const_lv32_E : ap_const_lv32_B]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buff_address0 = buff_addr_38_reg_3886;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        buff_address0 = ap_const_lv64_3E;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        buff_address0 = ap_const_lv64_40;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        buff_address0 = ap_const_lv64_3F;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        buff_address0 = buff_addr_36_reg_3829;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        buff_address0 = ap_const_lv64_3D;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        buff_address0 = buff_addr_40_reg_3980;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buff_address0 = ap_const_lv64_34;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buff_address0 = buff_addr_26_reg_3193;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        buff_address0 = buff_addr_34_reg_3898;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        buff_address0 = ap_const_lv64_33;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        buff_address0 = ap_const_lv64_39;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        buff_address0 = ap_const_lv64_35;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        buff_address0 = ap_const_lv64_3C;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        buff_address0 = ap_const_lv64_3B;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        buff_address0 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buff_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buff_address0 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buff_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        buff_address0 = ap_const_lv64_19;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buff_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buff_address0 = buff_addr_30_reg_3537;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buff_address0 = ap_const_lv64_30;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buff_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buff_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buff_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buff_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buff_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buff_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buff_address0 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buff_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buff_address0 = ap_const_lv64_11;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buff_address0 = ap_const_lv64_13;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buff_address0 = ap_const_lv64_15;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buff_address0 = ap_const_lv64_42;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buff_address0 = ap_const_lv64_31;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buff_address0 = ap_const_lv64_38;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buff_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buff_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buff_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buff_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buff_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buff_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buff_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buff_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buff_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buff_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buff_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buff_address0 = ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_address0 = ap_const_lv64_37;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buff_address0 = ap_const_lv64_36;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buff_address0 = ap_const_lv64_29;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buff_address0 = ap_const_lv64_28;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_address0 = ap_const_lv64_27;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_address0 = ap_const_lv64_26;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buff_address0 = ap_const_lv64_25;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        buff_address0 = ap_const_lv64_24;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_address0 = grp_upzero_fu_996_dlti_address0;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buff_address1 = ap_const_lv64_3B;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        buff_address1 = ap_const_lv64_3D;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        buff_address1 = buff_addr_35_reg_3823;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        buff_address1 = ap_const_lv64_30;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        buff_address1 = ap_const_lv64_3C;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        buff_address1 = ap_const_lv64_3E;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        buff_address1 = buff_addr_39_reg_3965;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buff_address1 = buff_addr_29_reg_3255;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buff_address1 = ap_const_lv64_37;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        buff_address1 = ap_const_lv64_36;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state55))) begin
        buff_address1 = buff_addr_27_reg_3199;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        buff_address1 = ap_const_lv64_3A;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        buff_address1 = ap_const_lv64_34;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        buff_address1 = ap_const_lv64_40;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        buff_address1 = ap_const_lv64_3F;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        buff_address1 = ap_const_lv64_23;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buff_address1 = ap_const_lv64_22;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buff_address1 = ap_const_lv64_21;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buff_address1 = ap_const_lv64_20;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        buff_address1 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buff_address1 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buff_address1 = ap_const_lv64_31;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buff_address1 = ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buff_address1 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buff_address1 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buff_address1 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buff_address1 = ap_const_lv64_8;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buff_address1 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buff_address1 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buff_address1 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buff_address1 = ap_const_lv64_10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buff_address1 = ap_const_lv64_12;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buff_address1 = ap_const_lv64_14;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buff_address1 = ap_const_lv64_16;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buff_address1 = tqmf_ptr_1_reg_3532;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buff_address1 = ap_const_lv64_41;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buff_address1 = ap_const_lv64_17;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buff_address1 = ap_const_lv64_15;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buff_address1 = ap_const_lv64_13;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buff_address1 = ap_const_lv64_11;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buff_address1 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buff_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buff_address1 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buff_address1 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buff_address1 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buff_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buff_address1 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buff_address1 = ap_const_lv64_1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_address1 = ap_const_lv64_33;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buff_address1 = ap_const_lv64_32;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buff_address1 = ap_const_lv64_2F;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buff_address1 = ap_const_lv64_2E;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_address1 = ap_const_lv64_2D;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_address1 = ap_const_lv64_2C;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buff_address1 = ap_const_lv64_2B;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        buff_address1 = ap_const_lv64_2A;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_address1 = grp_upzero_fu_996_dlti_address1;
    end else begin
        buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state67))) begin
        buff_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_ce0 = grp_upzero_fu_996_dlti_ce0;
    end else begin
        buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state67))) begin
        buff_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_ce1 = grp_upzero_fu_996_dlti_ce1;
    end else begin
        buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buff_d0 = apl2_assign_1_cast_fu_3089_p1;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        buff_d0 = buff_q0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        buff_d0 = nbl_assign_3_cast_fu_2711_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buff_d0 = plt_reg_3722;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buff_d0 = rlt_reg_3728;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state66))) begin
        buff_d0 = reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buff_d0 = tmp_27_i_cast_fu_2029_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buff_d0 = il_assign_1_fu_1967_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buff_d0 = reg_1075;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buff_d0 = reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buff_d0 = reg_1038;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buff_d0 = reg_1050;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buff_d0 = reg_1062;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buff_d0 = buff_load_12_reg_3394;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buff_d0 = buff_load_14_reg_3418;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buff_d0 = buff_load_16_reg_3442;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buff_d0 = buff_load_19_reg_3466;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buff_d0 = buff_load_21_reg_3490;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buff_d0 = reg_1068;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_d0 = grp_upzero_fu_996_dlti_d0;
    end else begin
        buff_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buff_d1 = apl1_7_cast_fu_3093_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        buff_d1 = ph_reg_4083;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        buff_d1 = yh_reg_4089;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        buff_d1 = tmp_27_i1_cast_fu_2774_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        buff_d1 = apl1_3_cast_fu_2701_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buff_d1 = apl2_assign_cast_fu_2631_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buff_d1 = buff_q1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buff_d1 = nbl_assign_2_cast_fu_2002_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buff_d1 = reg_1068;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buff_d1 = reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buff_d1 = reg_1032;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buff_d1 = reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buff_d1 = reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buff_d1 = buff_load_11_reg_3382;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buff_d1 = buff_load_13_reg_3406;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buff_d1 = buff_load_15_reg_3430;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buff_d1 = buff_load_18_reg_3454;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buff_d1 = buff_load_20_reg_3478;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buff_d1 = buff_load_22_reg_3502;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buff_d1 = buff_load_25_reg_3520;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buff_d1 = reg_1075;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_d1 = grp_upzero_fu_996_dlti_d1;
    end else begin
        buff_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state67))) begin
        buff_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_we0 = grp_upzero_fu_996_dlti_we0;
    end else begin
        buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state67))) begin
        buff_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state58))) begin
        buff_we1 = grp_upzero_fu_996_dlti_we1;
    end else begin
        buff_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_upzero_fu_996_bli_offset = ap_const_lv7_1E;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_upzero_fu_996_bli_offset = ap_const_lv7_24;
    end else begin
        grp_upzero_fu_996_bli_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_upzero_fu_996_dlt = dh_1_reg_4076;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_upzero_fu_996_dlt = dlt_reg_3695;
    end else begin
        grp_upzero_fu_996_dlt = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_upzero_fu_996_dlti_offset = ap_const_lv7_18;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_upzero_fu_996_dlti_offset = ap_const_lv7_2A;
    end else begin
        grp_upzero_fu_996_dlti_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ilb_table_address0 = tmp_i9_fu_2736_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        ilb_table_address0 = tmp_i3_fu_1997_p1;
    end else begin
        ilb_table_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state55))) begin
        ilb_table_ce0 = 1'b1;
    end else begin
        ilb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done))) begin
        qq4_code4_table_s_ce0 = 1'b1;
    end else begin
        qq4_code4_table_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~(1'b0 == grp_quantl_fu_1009_ap_done))) begin
        wl_code_table_ce0 = 1'b1;
    end else begin
        wl_code_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (~(1'b0 == grp_quantl_fu_1009_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (~(1'b0 == grp_upzero_fu_996_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (~(1'b0 == grp_upzero_fu_996_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_39];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state63 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_state64 = ap_CS_fsm[ap_const_lv32_3F];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_41];

assign ap_CS_fsm_state67 = ap_CS_fsm[ap_const_lv32_42];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_return = {{tmp_31_reg_4156}, {tmp_30_reg_4151}};

assign apl1_2_cast_fu_2670_p1 = $signed(apl1_2_fu_2664_p2);

assign apl1_2_fu_2664_p2 = (ap_const_lv16_0 - apl1_8_cast1_fu_2640_p1);

assign apl1_3_cast_fu_2701_p1 = $signed(apl1_3_reg_4051);

assign apl1_3_fu_2680_p3 = ((tmp_24_i_fu_2674_p2[0:0] === 1'b1) ? apl1_2_fu_2664_p2 : tmp_52_fu_2660_p1);

assign apl1_4_fu_2973_p2 = (apl_v_i1_cast_cast_fu_2966_p3 + tmp_22_i1_fu_2956_p4);

assign apl1_6_cast_fu_3071_p1 = $signed(apl1_6_fu_3065_p2);

assign apl1_6_fu_3065_p2 = (ap_const_lv16_0 - apl1_9_cast1_fu_3041_p1);

assign apl1_7_cast_fu_3093_p1 = $signed(apl1_7_reg_4161);

assign apl1_7_fu_3081_p3 = ((tmp_24_i1_fu_3075_p2[0:0] === 1'b1) ? apl1_6_fu_3065_p2 : tmp_65_fu_3061_p1);

assign apl1_8_cast1_fu_2640_p1 = apl1_8_fu_2635_p2;

assign apl1_8_cast_fu_2644_p1 = apl1_8_fu_2635_p2;

assign apl1_8_fu_2635_p2 = (ap_const_lv15_3C00 - apl2_assign_reg_4030);

assign apl1_9_cast1_fu_3041_p1 = apl1_9_fu_3036_p2;

assign apl1_9_cast_fu_3045_p1 = apl1_9_fu_3036_p2;

assign apl1_9_fu_3036_p2 = (ap_const_lv15_3C00 - apl2_assign_1_reg_4145);

assign apl1_fu_2409_p2 = (apl_v_i_cast_cast_fu_2402_p3 + tmp_22_i_fu_2392_p4);

assign apl2_1_fu_2932_p2 = ($signed(tmp45_cast_fu_2928_p1) + $signed(tmp_12_i1_fu_2883_p4));

assign apl2_assign_1_cast_fu_3089_p1 = $signed(apl2_assign_1_reg_4145);

assign apl2_assign_1_fu_3001_p3 = ((tmp_17_i3_fu_2995_p2[0:0] === 1'b1) ? ap_const_lv15_5000 : tmp_64_fu_2991_p1);

assign apl2_assign_cast_fu_2631_p1 = $signed(apl2_assign_reg_4030);

assign apl2_assign_fu_2517_p3 = ((tmp_17_i1_fu_2511_p2[0:0] === 1'b1) ? ap_const_lv15_5000 : tmp_51_fu_2507_p1);

assign apl2_fu_2368_p2 = ($signed(tmp33_cast_fu_2364_p1) + $signed(tmp_12_i_fu_2319_p4));

assign apl_v_i1_cast_cast_fu_2966_p3 = ((tmp_60_reg_4122[0:0] === 1'b1) ? ap_const_lv32_FFFFFF40 : ap_const_lv32_C0);

assign apl_v_i_cast_cast_fu_2402_p3 = ((tmp_47_reg_3985[0:0] === 1'b1) ? ap_const_lv32_FFFFFF40 : ap_const_lv32_C0);

assign buff_addr_26_reg_3193 = ap_const_lv64_36;

assign buff_addr_27_reg_3199 = ap_const_lv64_32;

assign buff_addr_29_reg_3255 = ap_const_lv64_33;

assign buff_addr_30_reg_3537 = ap_const_lv64_38;

assign buff_addr_34_reg_3898 = ap_const_lv64_35;

assign buff_addr_35_reg_3823 = ap_const_lv64_3F;

assign buff_addr_36_reg_3829 = ap_const_lv64_3B;

assign buff_addr_38_reg_3886 = ap_const_lv64_3C;

assign buff_addr_39_reg_3965 = ap_const_lv64_3A;

assign buff_addr_40_reg_3980 = ap_const_lv64_39;

assign decis_fu_2449_p1 = $signed(tmp_20_fu_2440_p4);

assign eh_fu_2419_p2 = (xh_reg_3643 - sh_fu_2415_p2);

assign el_fu_1841_p2 = (xl_reg_3638 - sl_reg_3648);

assign grp_fu_2177_p1 = tmp_i4_fu_2170_p1;

assign grp_fu_2187_p1 = tmp_i4_fu_2170_p1;

assign grp_fu_2794_p1 = tmp_i1_fu_2787_p1;

assign grp_fu_2804_p1 = tmp_i1_fu_2787_p1;

assign grp_quantl_fu_1009_ap_start = ap_reg_grp_quantl_fu_1009_ap_start;

assign grp_upzero_fu_996_ap_start = ap_reg_grp_upzero_fu_996_ap_start;

assign il_assign_1_fu_1967_p1 = il_assign_reg_3665;

assign m_fu_2461_p2 = (ap_const_lv32_0 - eh_fu_2419_p2);

assign n_assign_1_fu_2467_p3 = ((tmp_56_fu_2453_p3[0:0] === 1'b1) ? m_fu_2461_p2 : eh_fu_2419_p2);

assign nbh_assign_1_cast_fu_2599_p2 = (tmp_26_fu_2583_p4 + tmp_57_fu_2579_p1);

assign nbh_assign_1_fu_2593_p2 = (tmp_25_fu_2566_p6 + wd_fu_2556_p4);

assign nbl_assign_1_cast_fu_1912_p2 = ($signed(tmp_15_fu_1896_p4) + $signed(tmp_fu_1892_p1));

assign nbl_assign_1_fu_1906_p2 = ($signed(wl_code_table_load_c_fu_1888_p1) + $signed(tmp_47_i_fu_1878_p4));

assign nbl_assign_2_cast_fu_2002_p1 = nbl_assign_2_reg_3707;

assign nbl_assign_2_fu_1971_p3 = ((tmp_50_i_reg_3690[0:0] === 1'b1) ? ap_const_lv15_4800 : tmp_46_reg_3685);

assign nbl_assign_3_cast_fu_2711_p1 = nbl_assign_3_fu_2705_p3;

assign nbl_assign_3_fu_2705_p3 = ((tmp_53_i_reg_4046[0:0] === 1'b1) ? ap_const_lv15_5800 : tmp_59_reg_4041);

assign p_i1_fu_2500_p3 = ((tmp_16_i_fu_2495_p2[0:0] === 1'b1) ? ap_const_lv32_3000 : apl2_reg_4006);

assign p_i2_fu_2613_p3 = ((tmp_58_fu_2605_p3[0:0] === 1'b1) ? ap_const_lv31_0 : nbh_assign_1_cast_fu_2599_p2);

assign p_i3_fu_2984_p3 = ((tmp_16_i2_fu_2979_p2[0:0] === 1'b1) ? ap_const_lv32_3000 : apl2_1_reg_4133);

assign p_i_fu_1926_p3 = ((tmp_45_fu_1918_p3[0:0] === 1'b1) ? ap_const_lv31_0 : nbl_assign_1_cast_fu_1912_p2);

assign p_ih_t_fu_2489_p2 = (tmp_22_fu_2481_p3 + tmp_18_fu_2432_p3);

assign p_shl1_cast_fu_1546_p1 = $signed(p_shl1_fu_1538_p3);

assign p_shl1_fu_1538_p3 = {{reg_1019}, {ap_const_lv2_0}};

assign p_shl2_cast_fu_1295_p1 = $signed(p_shl2_fu_1287_p3);

assign p_shl2_fu_1287_p3 = {{reg_1044}, {ap_const_lv6_0}};

assign p_shl3_cast_fu_1307_p1 = $signed(p_shl3_fu_1299_p3);

assign p_shl3_fu_1299_p3 = {{reg_1044}, {ap_const_lv4_0}};

assign p_shl4_cast_fu_1615_p1 = $signed(p_shl4_fu_1607_p3);

assign p_shl4_fu_1607_p3 = {{reg_1068}, {ap_const_lv6_0}};

assign p_shl5_cast_fu_1627_p1 = $signed(p_shl5_fu_1619_p3);

assign p_shl5_fu_1619_p3 = {{reg_1068}, {ap_const_lv4_0}};

assign p_shl6_cast_fu_1488_p1 = $signed(p_shl6_fu_1480_p3);

assign p_shl6_fu_1480_p3 = {{buff_q1}, {ap_const_lv4_0}};

assign p_shl7_cast_fu_1500_p1 = $signed(p_shl7_fu_1492_p3);

assign p_shl7_fu_1492_p3 = {{buff_q1}, {ap_const_lv2_0}};

assign p_shl_cast_fu_1534_p1 = $signed(p_shl_fu_1526_p3);

assign p_shl_fu_1526_p3 = {{reg_1019}, {ap_const_lv4_0}};

assign p_shl_i1_cast_fu_2309_p1 = p_shl_i1_fu_2301_p3;

assign p_shl_i1_fu_2301_p3 = {{buff_q0}, {ap_const_lv7_0}};

assign p_shl_i2_cast_fu_2382_p1 = p_shl_i2_fu_2374_p3;

assign p_shl_i2_fu_2374_p3 = {{buff_q1}, {ap_const_lv8_0}};

assign p_shl_i3_fu_2542_p3 = {{reg_1032}, {ap_const_lv7_0}};

assign p_shl_i4_cast_fu_2873_p1 = p_shl_i4_fu_2865_p3;

assign p_shl_i4_fu_2865_p3 = {{buff_q1}, {ap_const_lv7_0}};

assign p_shl_i5_cast_fu_2946_p1 = p_shl_i5_fu_2938_p3;

assign p_shl_i5_fu_2938_p3 = {{buff_q0}, {ap_const_lv8_0}};

assign p_shl_i_fu_1865_p3 = {{buff_load_45_reg_3654}, {ap_const_lv7_0}};

assign ph_fu_2779_p2 = (szh_reg_3959 + dh_1_reg_4076);

assign pl_1_fu_1243_p2 = (pl_reg_3337 + tmp_58_i_reg_3354);

assign pl_4_fu_2230_p2 = (pl_3_reg_3970 + tmp_58_i1_reg_3975);

assign plt_fu_2034_p2 = (szl_reg_3331 + dlt_reg_3695);

assign qq4_code4_table_s_address0 = tmp_13_fu_1856_p1;

assign rlt_fu_2038_p2 = (sl_reg_3648 + dlt_reg_3695);

assign sh_fu_2415_p2 = (szh_reg_3959 + sph_reg_3996);

assign sl_fu_1837_p2 = (szl_reg_3331 + spl_reg_3371);

assign tmp10_fu_1710_p2 = ($signed(tmp29_cast_fu_1706_p1) + $signed(tmp27_cast_fu_1687_p1));

assign tmp11_fu_1730_p2 = ($signed(tmp_76_9_cast_fu_1641_p1) + $signed(tmp_76_7_cast_fu_1600_p1));

assign tmp12_fu_1736_p2 = ($signed(tmp11_fu_1730_p2) + $signed(tmp_76_8_cast_fu_1637_p1));

assign tmp13_fu_1514_p2 = ($signed(tmp_76_6_cast_fu_1413_p1) + $signed(tmp_76_5_cast_fu_1391_p1));

assign tmp14_fu_1749_p2 = ($signed(tmp35_cast_fu_1746_p1) + $signed(tmp_76_4_cast_fu_1584_p1));

assign tmp15_fu_1755_p2 = ($signed(tmp14_fu_1749_p2) + $signed(tmp32_cast_fu_1742_p1));

assign tmp16_fu_1761_p2 = ($signed(tmp_76_cast_fu_1563_p1) + $signed(tmp_76_1_reg_3552));

assign tmp17_fu_1766_p2 = ($signed(tmp16_fu_1761_p2) + $signed(xb_cast_fu_1560_p1));

assign tmp18_fu_1520_p2 = ($signed(tmp_76_2_fu_1331_p2) + $signed(tmp_64_cast_fu_1510_p1));

assign tmp19_fu_1779_p2 = ($signed(tmp40_cast_fu_1776_p1) + $signed(tmp_76_3_cast_fu_1578_p1));

assign tmp1_fu_1468_p2 = ($signed(tmp_73_9_cast_fu_1444_p1) + $signed(tmp_73_7_fu_1420_p2));

assign tmp20_fu_1785_p2 = ($signed(tmp19_fu_1779_p2) + $signed(tmp37_cast_fu_1772_p1));

assign tmp21_fu_1170_p2 = (tmp_61_i_reg_3183 + tmp_61_1_i_reg_3188);

assign tmp22_cast_fu_1656_p1 = $signed(tmp2_fu_1650_p2);

assign tmp22_fu_1214_p2 = (tmp21_reg_3244 + zl_reg_3289);

assign tmp23_cast_fu_1647_p1 = $signed(tmp1_reg_3602);

assign tmp23_fu_1218_p2 = (tmp_61_3_i_reg_3299 + tmp_61_4_i_reg_3304);

assign tmp24_fu_1222_p2 = (tmp23_fu_1218_p2 + tmp_61_2_i_reg_3294);

assign tmp26_cast_fu_1716_p1 = $signed(tmp10_fu_1710_p2);

assign tmp27_cast_fu_1687_p1 = $signed(tmp7_fu_1681_p2);

assign tmp28_cast_fu_1678_p1 = $signed(tmp6_reg_3607);

assign tmp29_cast_fu_1706_p1 = $signed(tmp9_fu_1701_p2);

assign tmp2_fu_1650_p2 = ($signed(tmp23_cast_fu_1647_p1) + $signed(tmp_73_8_cast_fu_1604_p1));

assign tmp30_cast_fu_1697_p1 = $signed(tmp8_fu_1691_p2);

assign tmp32_cast_fu_1742_p1 = $signed(tmp12_fu_1736_p2);

assign tmp33_cast_fu_2364_p1 = $signed(tmp33_fu_2358_p2);

assign tmp33_fu_2358_p2 = ($signed(tmp_13_i_cast_fu_2346_p1) + $signed(tmp_15_i_cast_cast_fu_2350_p3));

assign tmp34_fu_2126_p2 = (tmp_61_i1_reg_3813 + tmp_61_1_i1_reg_3818);

assign tmp35_cast_fu_1746_p1 = $signed(tmp13_reg_3612);

assign tmp35_fu_2193_p2 = (tmp34_reg_3875 + zl_1_reg_3903);

assign tmp36_cast_fu_1791_p1 = $signed(tmp20_fu_1785_p2);

assign tmp36_fu_2197_p2 = (tmp_61_3_i1_reg_3913 + tmp_61_4_i1_reg_3918);

assign tmp37_cast_fu_1772_p1 = $signed(tmp17_fu_1766_p2);

assign tmp37_fu_2201_p2 = (tmp36_fu_2197_p2 + tmp_61_2_i1_reg_3908);

assign tmp3_fu_1660_p2 = ($signed(tmp_73_6_cast_fu_1590_p1) + $signed(tmp_73_5_cast_fu_1587_p1));

assign tmp40_cast_fu_1776_p1 = $signed(tmp18_reg_3617);

assign tmp45_cast_fu_2928_p1 = $signed(tmp45_fu_2922_p2);

assign tmp45_fu_2922_p2 = ($signed(tmp_13_i1_cast_fu_2910_p1) + $signed(tmp_15_i1_cast_cast_fu_2914_p3));

assign tmp4_fu_1666_p2 = ($signed(tmp3_fu_1660_p2) + $signed(tmp_73_4_cast_fu_1581_p1));

assign tmp5_fu_1672_p2 = ($signed(tmp4_fu_1666_p2) + $signed(tmp22_cast_fu_1656_p1));

assign tmp6_fu_1474_p2 = (tmp_s_fu_1271_p2 + tmp_73_1_fu_1311_p2);

assign tmp7_fu_1681_p2 = ($signed(tmp28_cast_fu_1678_p1) + $signed(xa_cast_fu_1556_p1));

assign tmp8_fu_1691_p2 = ($signed(tmp_73_2_cast_fu_1574_p1) + $signed(tmp_62_cast_fu_1644_p1));

assign tmp9_fu_1701_p2 = ($signed(tmp30_cast_fu_1697_p1) + $signed(tmp_73_3_reg_3557));

assign tmp_10_fu_1805_p2 = (xa_1_fu_1720_p2 + xb_1_fu_1795_p2);

assign tmp_10_i1_fu_2877_p2 = ($signed(p_shl_i4_cast_fu_2873_p1) - $signed(tmp_9_i1_cast_fu_2861_p1));

assign tmp_10_i_fu_2313_p2 = ($signed(p_shl_i1_cast_fu_2309_p1) - $signed(tmp_9_i_cast_fu_2297_p1));

assign tmp_11_fu_1821_p2 = (xa_1_cast_fu_1726_p1 - xb_1_cast_fu_1801_p1);

assign tmp_12_fu_1846_p4 = {{grp_quantl_fu_1009_ap_return[ap_const_lv32_5 : ap_const_lv32_2]}};

assign tmp_12_i1_fu_2883_p4 = {{tmp_10_i1_fu_2877_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

assign tmp_12_i_fu_2319_p4 = {{tmp_10_i_fu_2313_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

assign tmp_13_fu_1856_p1 = tmp_12_fu_1846_p4;

assign tmp_13_i1_cast_fu_2910_p1 = $signed(tmp_63_fu_2903_p3);

assign tmp_13_i_cast_fu_2346_p1 = $signed(tmp_50_fu_2339_p3);

assign tmp_14_fu_1951_p0 = reg_1081;

assign tmp_14_fu_1951_p1 = qq4_code4_table_loa_reg_3680;

assign tmp_14_fu_1951_p2 = ($signed(tmp_14_fu_1951_p0) * $signed(tmp_14_fu_1951_p1));

assign tmp_15_fu_1896_p4 = {{tmp_i2_fu_1872_p2[ap_const_lv32_25 : ap_const_lv32_7]}};

assign tmp_15_i1_cast_cast_fu_2914_p3 = ((tmp_61_fu_2854_p3[0:0] === 1'b1) ? ap_const_lv29_1FFFFF80 : ap_const_lv29_80);

assign tmp_15_i_cast_cast_fu_2350_p3 = ((tmp_48_fu_2290_p3[0:0] === 1'b1) ? ap_const_lv29_1FFFFF80 : ap_const_lv29_80);

assign tmp_16_fu_2276_p4 = {{buff_q1[ap_const_lv32_1F : ap_const_lv32_5]}};

assign tmp_16_i2_fu_2979_p2 = (($signed(apl2_1_reg_4133) > $signed(32'b11000000000000)) ? 1'b1 : 1'b0);

assign tmp_16_i_fu_2495_p2 = (($signed(apl2_reg_4006) > $signed(32'b11000000000000)) ? 1'b1 : 1'b0);

assign tmp_17_fu_2286_p1 = $signed(tmp_16_fu_2276_p4);

assign tmp_17_i1_fu_2511_p2 = (($signed(p_i1_fu_2500_p3) < $signed(32'b11111111111111111101000000000000)) ? 1'b1 : 1'b0);

assign tmp_17_i3_fu_2995_p2 = (($signed(p_i3_fu_2984_p3) < $signed(32'b11111111111111111101000000000000)) ? 1'b1 : 1'b0);

assign tmp_18_fu_2432_p3 = ((tmp_55_fu_2424_p3[0:0] === 1'b1) ? ap_const_lv2_2 : ap_const_lv2_0);

assign tmp_19_fu_2248_p1 = reg_1026;

assign tmp_19_fu_2248_p2 = ($signed({{1'b0}, {ap_const_lv43_234}}) * $signed(tmp_19_fu_2248_p1));

assign tmp_20_fu_2440_p4 = {{tmp_19_reg_4001[ap_const_lv32_2A : ap_const_lv32_C]}};

assign tmp_21_fu_2475_p2 = (($signed(n_assign_1_fu_2467_p3) > $signed(decis_fu_2449_p1)) ? 1'b1 : 1'b0);

assign tmp_22_fu_2481_p3 = ((tmp_21_fu_2475_p2[0:0] === 1'b1) ? ap_const_lv2_2 : ap_const_lv2_3);

assign tmp_22_i1_fu_2956_p4 = {{tmp_i10_fu_2950_p2[ap_const_lv32_27 : ap_const_lv32_8]}};

assign tmp_22_i_fu_2392_p4 = {{tmp_i5_fu_2386_p2[ap_const_lv32_27 : ap_const_lv32_8]}};

assign tmp_23_i1_fu_3049_p2 = (($signed(apl1_4_reg_4139) > $signed(apl1_9_cast_fu_3045_p1)) ? 1'b1 : 1'b0);

assign tmp_23_i_fu_2648_p2 = (($signed(apl1_reg_4012) > $signed(apl1_8_cast_fu_2644_p1)) ? 1'b1 : 1'b0);

assign tmp_24_i1_fu_3075_p2 = (($signed(wd3_0_apl1_i1_fu_3054_p3) < $signed(apl1_6_cast_fu_3071_p1)) ? 1'b1 : 1'b0);

assign tmp_24_i_fu_2674_p2 = (($signed(wd3_0_apl1_i_fu_2653_p3) < $signed(apl1_2_cast_fu_2670_p1)) ? 1'b1 : 1'b0);

assign tmp_26_fu_2583_p4 = {{tmp_i8_fu_2550_p2[ap_const_lv32_25 : ap_const_lv32_7]}};

assign tmp_26_i1_cast_cast_fu_2756_p1 = tmp_26_i1_fu_2751_p2;

assign tmp_26_i1_fu_2751_p2 = ($signed(ap_const_lv4_B) - $signed(wd2_4_cast_reg_4066));

assign tmp_26_i_cast_cast_fu_2011_p1 = tmp_26_i_fu_2006_p2;

assign tmp_26_i_fu_2006_p2 = ($signed(ap_const_lv4_9) - $signed(wd2_cast_reg_3712));

assign tmp_27_fu_2840_p4 = {{buff_q0[ap_const_lv32_1F : ap_const_lv32_5]}};

assign tmp_27_i1_cast_fu_2774_p1 = tmp_27_i1_fu_2766_p3;

assign tmp_27_i1_fu_2766_p3 = {{wd3_2_fu_2760_p2}, {ap_const_lv3_0}};

assign tmp_27_i_cast_fu_2029_p1 = tmp_27_i_fu_2021_p3;

assign tmp_27_i_fu_2021_p3 = {{wd3_fu_2015_p2}, {ap_const_lv3_0}};

assign tmp_28_fu_2850_p1 = $signed(tmp_27_fu_2840_p4);

assign tmp_29_fu_3009_p3 = {{p_ih_t_reg_4023}, {ap_const_lv6_0}};

assign tmp_30_fu_3020_p2 = (tmp_66_fu_3016_p1 | tmp_29_fu_3009_p3);

assign tmp_43_fu_1174_p2 = reg_1019 << ap_const_lv32_1;

assign tmp_44_fu_1194_p2 = reg_1019 << ap_const_lv32_1;

assign tmp_45_fu_1918_p3 = nbl_assign_1_fu_1906_p2[ap_const_lv32_1F];

assign tmp_46_fu_1934_p1 = p_i_fu_1926_p3[14:0];

assign tmp_47_i_fu_1878_p4 = {{tmp_i2_fu_1872_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

assign tmp_48_fu_2290_p3 = tmp_6_i_reg_3991[ap_const_lv32_3F];

assign tmp_49_fu_2329_p4 = {{wd2_1_fu_2270_p2[ap_const_lv32_22 : ap_const_lv32_7]}};

assign tmp_50_fu_2339_p3 = ((tmp_47_reg_3985[0:0] === 1'b1) ? tmp_17_fu_2286_p1 : tmp_49_fu_2329_p4);

assign tmp_50_i_fu_1938_p2 = ((p_i_fu_1926_p3 > ap_const_lv31_4800) ? 1'b1 : 1'b0);

assign tmp_51_fu_2507_p1 = p_i1_fu_2500_p3[14:0];

assign tmp_52_fu_2660_p1 = wd3_0_apl1_i_fu_2653_p3[15:0];

assign tmp_53_fu_2130_p2 = reg_1019 << ap_const_lv32_1;

assign tmp_53_i_fu_2625_p2 = ((p_i2_fu_2613_p3 > ap_const_lv31_5800) ? 1'b1 : 1'b0);

assign tmp_54_fu_2150_p2 = reg_1032 << ap_const_lv32_1;

assign tmp_55_fu_2424_p3 = eh_fu_2419_p2[ap_const_lv32_1F];

assign tmp_56_fu_2453_p3 = eh_fu_2419_p2[ap_const_lv32_1F];

assign tmp_57_fu_2579_p1 = tmp_25_fu_2566_p6[30:0];

assign tmp_58_fu_2605_p3 = nbh_assign_1_fu_2593_p2[ap_const_lv32_1F];

assign tmp_59_fu_2621_p1 = p_i2_fu_2613_p3[14:0];

assign tmp_61_fu_2854_p3 = tmp_6_i1_reg_4128[ap_const_lv32_3F];

assign tmp_62_cast_fu_1644_p1 = $signed(tmp_8_reg_3597);

assign tmp_62_fu_2893_p4 = {{wd2_3_fu_2834_p2[ap_const_lv32_22 : ap_const_lv32_7]}};

assign tmp_63_fu_2903_p3 = ((tmp_60_reg_4122[0:0] === 1'b1) ? tmp_28_fu_2850_p1 : tmp_62_fu_2893_p4);

assign tmp_64_cast_fu_1510_p1 = $signed(tmp_9_fu_1504_p2);

assign tmp_64_fu_2991_p1 = p_i3_fu_2984_p3[14:0];

assign tmp_65_fu_3061_p1 = wd3_0_apl1_i1_fu_3054_p3[15:0];

assign tmp_66_fu_3016_p1 = buff_q1[7:0];

assign tmp_73_1_fu_1311_p2 = ($signed(p_shl2_cast_fu_1295_p1) - $signed(p_shl3_cast_fu_1307_p1));

assign tmp_73_2_cast_fu_1574_p1 = $signed(tmp_73_2_fu_1566_p3);

assign tmp_73_2_fu_1566_p3 = {{reg_1056}, {ap_const_lv7_0}};

assign tmp_73_3_fu_1340_p1 = buff_load_11_reg_3382;

assign tmp_73_3_fu_1340_p2 = ($signed(ap_const_lv42_3FFFFFFFCB8) * $signed(tmp_73_3_fu_1340_p1));

assign tmp_73_4_cast_fu_1581_p1 = $signed(tmp_73_4_reg_3567);

assign tmp_73_4_fu_1358_p1 = buff_load_13_reg_3406;

assign tmp_73_4_fu_1358_p2 = ($signed({{1'b0}, {ap_const_lv44_EDC}}) * $signed(tmp_73_4_fu_1358_p1));

assign tmp_73_5_cast_fu_1587_p1 = $signed(tmp_73_5_reg_3577);

assign tmp_73_5_fu_1376_p1 = buff_load_15_reg_3430;

assign tmp_73_5_fu_1376_p2 = ($signed({{1'b0}, {ap_const_lv46_3C90}}) * $signed(tmp_73_5_fu_1376_p1));

assign tmp_73_6_cast_fu_1590_p1 = $signed(tmp_73_6_reg_3582);

assign tmp_73_6_fu_1398_p1 = buff_load_18_reg_3454;

assign tmp_73_6_fu_1398_p2 = ($signed(ap_const_lv44_FFFFFFFF36C) * $signed(tmp_73_6_fu_1398_p1));

assign tmp_73_7_fu_1420_p1 = buff_load_20_reg_3478;

assign tmp_73_7_fu_1420_p2 = ($signed({{1'b0}, {ap_const_lv43_5A8}}) * $signed(tmp_73_7_fu_1420_p1));

assign tmp_73_8_cast_fu_1604_p1 = $signed(tmp_73_8_reg_3587);

assign tmp_73_8_fu_1429_p1 = buff_load_22_reg_3502;

assign tmp_73_8_fu_1429_p2 = ($signed(ap_const_lv43_7FFFFFFFD90) * $signed(tmp_73_8_fu_1429_p1));

assign tmp_73_9_cast_fu_1444_p1 = $signed(tmp_73_9_fu_1438_p2);

assign tmp_73_9_fu_1438_p1 = buff_load_25_reg_3520;

assign tmp_73_9_fu_1438_p2 = ($signed({{1'b0}, {ap_const_lv41_D4}}) * $signed(tmp_73_9_fu_1438_p1));

assign tmp_76_1_fu_1321_p1 = reg_1050;

assign tmp_76_1_fu_1321_p2 = ($signed(ap_const_lv42_3FFFFFFFD90) * $signed(tmp_76_1_fu_1321_p1));

assign tmp_76_2_fu_1331_p1 = reg_1062;

assign tmp_76_2_fu_1331_p2 = ($signed({{1'b0}, {ap_const_lv43_5A8}}) * $signed(tmp_76_2_fu_1331_p1));

assign tmp_76_3_cast_fu_1578_p1 = $signed(tmp_76_3_reg_3562);

assign tmp_76_3_fu_1349_p1 = buff_load_12_reg_3394;

assign tmp_76_3_fu_1349_p2 = ($signed(ap_const_lv44_FFFFFFFF36C) * $signed(tmp_76_3_fu_1349_p1));

assign tmp_76_4_cast_fu_1584_p1 = $signed(tmp_76_4_reg_3572);

assign tmp_76_4_fu_1367_p1 = buff_load_14_reg_3418;

assign tmp_76_4_fu_1367_p2 = ($signed({{1'b0}, {ap_const_lv46_3C90}}) * $signed(tmp_76_4_fu_1367_p1));

assign tmp_76_5_cast_fu_1391_p1 = $signed(tmp_76_5_fu_1385_p2);

assign tmp_76_5_fu_1385_p1 = buff_load_16_reg_3442;

assign tmp_76_5_fu_1385_p2 = ($signed({{1'b0}, {ap_const_lv44_EDC}}) * $signed(tmp_76_5_fu_1385_p1));

assign tmp_76_6_cast_fu_1413_p1 = $signed(tmp_76_6_fu_1407_p2);

assign tmp_76_6_fu_1407_p1 = buff_load_19_reg_3466;

assign tmp_76_6_fu_1407_p2 = ($signed(ap_const_lv43_7FFFFFFFCB8) * $signed(tmp_76_6_fu_1407_p1));

assign tmp_76_7_cast_fu_1600_p1 = $signed(tmp_76_7_fu_1593_p3);

assign tmp_76_7_fu_1593_p3 = {{buff_load_21_reg_3490}, {ap_const_lv7_0}};

assign tmp_76_8_cast_fu_1637_p1 = $signed(tmp_76_8_fu_1631_p2);

assign tmp_76_8_fu_1631_p2 = ($signed(p_shl4_cast_fu_1615_p1) - $signed(p_shl5_cast_fu_1627_p1));

assign tmp_76_9_cast_fu_1641_p1 = $signed(tmp_76_9_reg_3592);

assign tmp_76_9_fu_1452_p1 = reg_1075;

assign tmp_76_9_fu_1452_p2 = ($signed(ap_const_lv39_7FFFFFFFD4) * $signed(tmp_76_9_fu_1452_p1));

assign tmp_76_cast_fu_1563_p1 = $signed(tmp_7_reg_3547);

assign tmp_7_fu_1281_p1 = reg_1038;

assign tmp_7_fu_1281_p2 = ($signed({{1'b0}, {ap_const_lv41_D4}}) * $signed(tmp_7_fu_1281_p1));

assign tmp_8_fu_1462_p1 = reg_1081;

assign tmp_8_fu_1462_p2 = ($signed(ap_const_lv39_7FFFFFFFD4) * $signed(tmp_8_fu_1462_p1));

assign tmp_9_fu_1504_p2 = ($signed(p_shl6_cast_fu_1488_p1) - $signed(p_shl7_cast_fu_1500_p1));

assign tmp_9_i1_cast_fu_2861_p1 = $signed(buff_q1);

assign tmp_9_i_cast_fu_2297_p1 = $signed(buff_q0);

assign tmp_fu_1892_p1 = $signed(wl_code_table_q0);

assign tmp_i10_cast_fu_2818_p1 = $signed(buff_q0);

assign tmp_i10_fu_2950_p2 = ($signed(p_shl_i5_cast_fu_2946_p1) - $signed(tmp_i10_cast_fu_2818_p1));

assign tmp_i1_fu_2787_p1 = $signed(ph_reg_4083);

assign tmp_i2_cast_fu_1862_p1 = $signed(buff_load_45_reg_3654);

assign tmp_i2_fu_1872_p2 = ($signed(p_shl_i_fu_1865_p3) - $signed(tmp_i2_cast_fu_1862_p1));

assign tmp_i3_fu_1997_p1 = wd1_fu_1977_p4;

assign tmp_i4_cast_fu_2254_p1 = $signed(buff_q1);

assign tmp_i4_fu_2170_p1 = $signed(plt_reg_3722);

assign tmp_i5_fu_2386_p2 = ($signed(p_shl_i2_cast_fu_2382_p1) - $signed(tmp_i4_cast_fu_2254_p1));

assign tmp_i8_cast_fu_2538_p1 = reg_1032;

assign tmp_i8_fu_2550_p2 = ($signed(p_shl_i3_fu_2542_p3) - $signed(tmp_i8_cast_fu_2538_p1));

assign tmp_i9_fu_2736_p1 = wd1_1_fu_2716_p4;

assign tmp_s_fu_1271_p1 = reg_1032;

assign tmp_s_fu_1271_p2 = ($signed(ap_const_lv39_7FFFFFFFD4) * $signed(tmp_s_fu_1271_p1));

assign tqmf_ptr_1_reg_3532 = ap_const_lv64_17;

assign wd1_1_fu_2716_p4 = {{nbl_assign_3_fu_2705_p3[ap_const_lv32_A : ap_const_lv32_6]}};

assign wd1_fu_1977_p4 = {{nbl_assign_2_fu_1971_p3[ap_const_lv32_A : ap_const_lv32_6]}};

assign wd2_1_cast_fu_2266_p1 = $signed(wd2_fu_2258_p3);

assign wd2_1_fu_2270_p2 = ($signed(ap_const_lv35_0) - $signed(wd2_1_cast_fu_2266_p1));

assign wd2_2_fu_2822_p3 = {{buff_q0}, {ap_const_lv2_0}};

assign wd2_3_fu_2834_p2 = ($signed(ap_const_lv35_0) - $signed(wd2_5_cast_fu_2830_p1));

assign wd2_5_cast_fu_2830_p1 = $signed(wd2_2_fu_2822_p3);

assign wd2_fu_2258_p3 = {{buff_q1}, {ap_const_lv2_0}};

assign wd3_0_apl1_i1_fu_3054_p3 = ((tmp_23_i1_fu_3049_p2[0:0] === 1'b1) ? apl1_9_cast_fu_3045_p1 : apl1_4_reg_4139);

assign wd3_0_apl1_i_fu_2653_p3 = ((tmp_23_i_fu_2648_p2[0:0] === 1'b1) ? apl1_8_cast_fu_2644_p1 : apl1_reg_4012);

assign wd3_2_fu_2760_p2 = ilb_table_q0 >> tmp_26_i1_cast_cast_fu_2756_p1;

assign wd3_fu_2015_p2 = ilb_table_q0 >> tmp_26_i_cast_cast_fu_2011_p1;

assign wd_fu_2556_p4 = {{tmp_i8_fu_2550_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

assign wl_code_table_address0 = tmp_13_fu_1856_p1;

assign wl_code_table_load_c_fu_1888_p1 = $signed(wl_code_table_q0);

assign xa_1_cast_fu_1726_p1 = xa_1_fu_1720_p2;

assign xa_1_fu_1720_p2 = ($signed(tmp26_cast_fu_1716_p1) + $signed(tmp5_fu_1672_p2));

assign xa_cast_fu_1556_p1 = $signed(xa_fu_1550_p2);

assign xa_fu_1550_p2 = ($signed(p_shl_cast_fu_1534_p1) - $signed(p_shl1_cast_fu_1546_p1));

assign xb_1_cast_fu_1801_p1 = xb_1_fu_1795_p2;

assign xb_1_fu_1795_p2 = ($signed(tmp36_cast_fu_1791_p1) + $signed(tmp15_fu_1755_p2));

assign xb_cast_fu_1560_p1 = $signed(xb_reg_3542);

assign xb_fu_1261_p1 = reg_1026;

assign xb_fu_1261_p2 = ($signed(ap_const_lv39_7FFFFFFFD4) * $signed(xb_fu_1261_p1));

assign yh_fu_2783_p2 = (sh_reg_4018 + dh_1_reg_4076);

assign zl_1_4_i1_fu_2206_p2 = (tmp37_fu_2201_p2 + tmp35_fu_2193_p2);

assign zl_1_4_i_fu_1227_p2 = (tmp24_fu_1222_p2 + tmp22_fu_1214_p2);

endmodule //encode
