/* verilator lint_off UNUSED */
/* verilator lint_off UNDRIVEN */
/* verilator lint_off DECLFILENAME */
/* verilator lint_off PINNOCONNECT */
/* verilator lint_off PINCONNECTEMPTY */
/* verilator lint_off STMTDLY */
/* verilator lint_off WIDTH */
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="BF_cfb64_encrypt,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqku115-rlf1924-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.590000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=3399,HLS_SYN_LUT=7168}" *)

module BF_cfb64_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_we0,
        in_r_d0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_we1,
        in_r_d1,
        in_r_q1
);

parameter    ap_ST_fsm_state1 = 33'b1;
parameter    ap_ST_fsm_state2 = 33'b10;
parameter    ap_ST_fsm_state3 = 33'b100;
parameter    ap_ST_fsm_state4 = 33'b1000;
parameter    ap_ST_fsm_state5 = 33'b10000;
parameter    ap_ST_fsm_state6 = 33'b100000;
parameter    ap_ST_fsm_state7 = 33'b1000000;
parameter    ap_ST_fsm_state8 = 33'b10000000;
parameter    ap_ST_fsm_state9 = 33'b100000000;
parameter    ap_ST_fsm_state10 = 33'b1000000000;
parameter    ap_ST_fsm_state11 = 33'b10000000000;
parameter    ap_ST_fsm_state12 = 33'b100000000000;
parameter    ap_ST_fsm_state13 = 33'b1000000000000;
parameter    ap_ST_fsm_state14 = 33'b10000000000000;
parameter    ap_ST_fsm_state15 = 33'b100000000000000;
parameter    ap_ST_fsm_state16 = 33'b1000000000000000;
parameter    ap_ST_fsm_state17 = 33'b10000000000000000;
parameter    ap_ST_fsm_state18 = 33'b100000000000000000;
parameter    ap_ST_fsm_state19 = 33'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 33'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 33'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 33'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 33'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 33'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 33'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 33'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 33'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 33'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 33'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 33'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 33'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 33'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 33'b100000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv64_58 = 64'b1011000;
parameter    ap_const_lv64_59 = 64'b1011001;
parameter    ap_const_lv64_5A = 64'b1011010;
parameter    ap_const_lv64_5B = 64'b1011011;
parameter    ap_const_lv64_5C = 64'b1011100;
parameter    ap_const_lv64_5D = 64'b1011101;
parameter    ap_const_lv64_5E = 64'b1011110;
parameter    ap_const_lv64_5F = 64'b1011111;
parameter    ap_const_lv64_60 = 64'b1100000;
parameter    ap_const_lv64_61 = 64'b1100001;
parameter    ap_const_lv64_62 = 64'b1100010;
parameter    ap_const_lv64_63 = 64'b1100011;
parameter    ap_const_lv64_50 = 64'b1010000;
parameter    ap_const_lv64_51 = 64'b1010001;
parameter    ap_const_lv64_52 = 64'b1010010;
parameter    ap_const_lv64_53 = 64'b1010011;
parameter    ap_const_lv64_54 = 64'b1010100;
parameter    ap_const_lv64_55 = 64'b1010101;
parameter    ap_const_lv64_56 = 64'b1010110;
parameter    ap_const_lv64_57 = 64'b1010111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv8_28 = 8'b101000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv8_50 = 8'b1010000;
parameter    ap_const_lv3_1 = 3'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in_r_address0;
output   in_r_ce0;
output   in_r_we0;
output  [7:0] in_r_d0;
input  [7:0] in_r_q0;
output  [6:0] in_r_address1;
output   in_r_ce1;
output   in_r_we1;
output  [7:0] in_r_d1;
input  [7:0] in_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] in_r_address0;
reg in_r_ce0;
reg in_r_we0;
reg[7:0] in_r_d0;
reg[6:0] in_r_address1;
reg in_r_ce1;
reg in_r_we1;
reg[7:0] in_r_d1;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [7:0] reg_472;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state21;
reg   [7:0] reg_476;
reg   [7:0] reg_480;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state22;
reg   [7:0] reg_484;
reg   [7:0] reg_488;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state23;
reg   [7:0] reg_492;
reg   [7:0] reg_496;
wire   [0:0] ap_CS_fsm_state13;
wire    grp_BF_encrypt_fu_385_ap_done;
wire   [0:0] ap_CS_fsm_state25;
reg   [7:0] reg_501;
reg   [7:0] reg_506;
reg   [7:0] reg_511;
wire   [7:0] grp_fu_465_p2;
reg   [7:0] reg_516;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state30;
wire   [6:0] in_addr_4_reg_833;
wire   [0:0] ap_CS_fsm_state3;
wire   [6:0] in_addr_5_reg_838;
wire   [0:0] tmp_s_fu_533_p2;
reg   [0:0] tmp_s_reg_843;
wire   [6:0] in_addr_6_reg_847;
wire   [6:0] in_addr_7_reg_852;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] n_fu_539_p5;
wire   [31:0] length_fu_551_p5;
reg   [6:0] in_addr_21_reg_929;
wire   [0:0] ap_CS_fsm_state8;
reg   [6:0] in_addr_22_reg_934;
wire   [31:0] l_3_fu_583_p2;
reg   [31:0] l_3_reg_939;
wire   [31:0] p_rec5_fu_595_p2;
reg   [31:0] p_rec5_reg_947;
wire   [0:0] tmp_209_fu_601_p2;
reg   [0:0] tmp_209_reg_952;
wire   [0:0] tmp_207_fu_589_p2;
wire   [31:0] tmp_407_fu_607_p5;
reg   [31:0] tmp_407_reg_956;
wire   [0:0] ap_CS_fsm_state12;
wire   [31:0] tmp_408_fu_620_p5;
reg   [31:0] tmp_408_reg_961;
wire   [7:0] tmp_410_fu_633_p1;
reg   [7:0] tmp_410_reg_966;
wire   [7:0] tmp_411_fu_637_p1;
reg   [7:0] tmp_411_reg_971;
reg   [6:0] in_addr_24_reg_976;
wire   [0:0] ap_CS_fsm_state16;
wire   [31:0] n_4_cast_fu_666_p1;
reg   [31:0] n_4_cast_reg_981;
reg   [6:0] in_addr_19_reg_986;
wire   [0:0] ap_CS_fsm_state20;
reg   [6:0] in_addr_20_reg_991;
wire   [31:0] l_2_fu_690_p2;
reg   [31:0] l_2_reg_996;
wire   [31:0] p_rec_fu_702_p2;
reg   [31:0] p_rec_reg_1004;
wire   [0:0] tmp_208_fu_708_p2;
reg   [0:0] tmp_208_reg_1009;
wire   [0:0] tmp_206_fu_696_p2;
wire   [31:0] tmp_402_fu_714_p5;
reg   [31:0] tmp_402_reg_1013;
wire   [0:0] ap_CS_fsm_state24;
wire   [31:0] tmp_403_fu_727_p5;
reg   [31:0] tmp_403_reg_1018;
wire   [7:0] tmp_404_fu_740_p1;
reg   [7:0] tmp_404_reg_1023;
wire   [7:0] tmp_405_fu_744_p1;
reg   [7:0] tmp_405_reg_1028;
reg   [6:0] in_addr_23_reg_1033;
wire   [0:0] ap_CS_fsm_state28;
wire   [31:0] n_3_cast_fu_773_p1;
reg   [31:0] n_3_cast_reg_1039;
reg   [7:0] tmp_4_reg_1044;
wire   [0:0] ap_CS_fsm_state32;
reg   [7:0] tmp_6_reg_1049;
wire    grp_BF_encrypt_fu_385_ap_start;
wire    grp_BF_encrypt_fu_385_ap_idle;
wire    grp_BF_encrypt_fu_385_ap_ready;
reg   [31:0] grp_BF_encrypt_fu_385_data_0_read;
reg   [31:0] grp_BF_encrypt_fu_385_data_1_read;
wire   [63:0] grp_BF_encrypt_fu_385_ap_return_0;
wire   [63:0] grp_BF_encrypt_fu_385_ap_return_1;
reg   [31:0] l3_reg_314;
wire   [0:0] ap_CS_fsm_state19;
reg   [31:0] n1_reg_323;
reg   [31:0] out_0_rec_reg_333;
reg   [31:0] l_1_reg_344;
wire   [0:0] ap_CS_fsm_state31;
reg   [31:0] n_1_reg_353;
reg   [31:0] out_1_rec_reg_363;
reg   [31:0] n_2_reg_374;
reg    ap_reg_grp_BF_encrypt_fu_385_ap_start;
wire   [63:0] out_0_rec_cast_fu_567_p1;
wire  signed [63:0] sum1_cast_fu_578_p1;
wire  signed [63:0] sum3_cast_fu_651_p1;
wire   [63:0] out_1_rec_cast_fu_674_p1;
wire  signed [63:0] sum_cast_fu_685_p1;
wire  signed [63:0] sum2_cast_fu_758_p1;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state29;
wire   [7:0] tmp_401_fu_777_p1;
wire   [0:0] ap_CS_fsm_state33;
wire   [31:0] encrypt_fu_521_p5;
wire   [7:0] tmp_400_fu_563_p1;
wire   [7:0] sum1_fu_572_p2;
wire   [7:0] tmp_412_fu_641_p1;
wire   [7:0] sum3_fu_645_p2;
wire   [2:0] tmp_413_fu_656_p1;
wire   [2:0] n_4_fu_660_p2;
wire   [7:0] tmp_fu_670_p1;
wire   [7:0] sum_fu_679_p2;
wire   [7:0] tmp_406_fu_748_p1;
wire   [7:0] sum2_fu_752_p2;
wire   [2:0] tmp_409_fu_763_p1;
wire   [2:0] n_3_fu_767_p2;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'b1;
#0 ap_reg_grp_BF_encrypt_fu_385_ap_start = 1'b0;
end

BF_encrypt grp_BF_encrypt_fu_385(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_BF_encrypt_fu_385_ap_start),
    .ap_done(grp_BF_encrypt_fu_385_ap_done),
    .ap_idle(grp_BF_encrypt_fu_385_ap_idle),
    .ap_ready(grp_BF_encrypt_fu_385_ap_ready),
    .data_0_read(grp_BF_encrypt_fu_385_data_0_read),
    .data_1_read(grp_BF_encrypt_fu_385_data_1_read),
    .ap_return_0(grp_BF_encrypt_fu_385_ap_return_0),
    .ap_return_1(grp_BF_encrypt_fu_385_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_BF_encrypt_fu_385_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24))) begin
            ap_reg_grp_BF_encrypt_fu_385_ap_start <= 1'b1;
        end else if ((1'b1 == grp_BF_encrypt_fu_385_ap_ready)) begin
            ap_reg_grp_BF_encrypt_fu_385_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_reg_843 == 1'b0))) begin
        l3_reg_314 <= length_fu_551_p5;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        l3_reg_314 <= l_3_reg_939;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(tmp_s_reg_843 == 1'b0))) begin
        l_1_reg_344 <= length_fu_551_p5;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        l_1_reg_344 <= l_2_reg_996;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_reg_843 == 1'b0))) begin
        n1_reg_323 <= n_fu_539_p5;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        n1_reg_323 <= n_4_cast_reg_981;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(tmp_s_reg_843 == 1'b0))) begin
        n_1_reg_353 <= n_fu_539_p5;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        n_1_reg_353 <= n_3_cast_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(tmp_207_fu_589_p2 == 1'b0))) begin
        n_2_reg_374 <= n1_reg_323;
    end else if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == tmp_206_fu_696_p2))) begin
        n_2_reg_374 <= n_1_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_reg_843 == 1'b0))) begin
        out_0_rec_reg_333 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        out_0_rec_reg_333 <= p_rec5_reg_947;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(tmp_s_reg_843 == 1'b0))) begin
        out_1_rec_reg_363 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        out_1_rec_reg_363 <= p_rec_reg_1004;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        in_addr_19_reg_986 <= out_1_rec_cast_fu_674_p1;
        in_addr_20_reg_991 <= sum_cast_fu_685_p1;
        l_2_reg_996 <= l_2_fu_690_p2;
        p_rec_reg_1004 <= p_rec_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_addr_21_reg_929 <= out_0_rec_cast_fu_567_p1;
        in_addr_22_reg_934 <= sum1_cast_fu_578_p1;
        l_3_reg_939 <= l_3_fu_583_p2;
        p_rec5_reg_947 <= p_rec5_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        in_addr_23_reg_1033 <= sum2_cast_fu_758_p1;
        n_3_cast_reg_1039[2 : 0] <= n_3_cast_fu_773_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        in_addr_24_reg_976 <= sum3_cast_fu_651_p1;
        n_4_cast_reg_981[2 : 0] <= n_4_cast_fu_666_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_472 <= in_r_q0;
        reg_476 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_480 <= in_r_q0;
        reg_484 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_488 <= in_r_q0;
        reg_492 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) | (~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25)))) begin
        reg_496 <= {{grp_BF_encrypt_fu_385_ap_return_0[ap_const_lv32_F : ap_const_lv32_8]}};
        reg_501 <= {{grp_BF_encrypt_fu_385_ap_return_1[ap_const_lv32_1F : ap_const_lv32_18]}};
        reg_506 <= {{grp_BF_encrypt_fu_385_ap_return_1[ap_const_lv32_17 : ap_const_lv32_10]}};
        reg_511 <= {{grp_BF_encrypt_fu_385_ap_return_1[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_516 <= grp_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'b0 == tmp_206_fu_696_p2))) begin
        tmp_208_reg_1009 <= tmp_208_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_207_fu_589_p2 == 1'b0))) begin
        tmp_209_reg_952 <= tmp_209_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_402_reg_1013 <= tmp_402_fu_714_p5;
        tmp_403_reg_1018 <= tmp_403_fu_727_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_404_reg_1023 <= tmp_404_fu_740_p1;
        tmp_405_reg_1028 <= tmp_405_fu_744_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_407_reg_956 <= tmp_407_fu_607_p5;
        tmp_408_reg_961 <= tmp_408_fu_620_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done))) begin
        tmp_410_reg_966 <= tmp_410_fu_633_p1;
        tmp_411_reg_971 <= tmp_411_fu_637_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_4_reg_1044 <= {{n_2_reg_374[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_6_reg_1049 <= {{n_2_reg_374[ap_const_lv32_1F : ap_const_lv32_18]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_s_reg_843 <= tmp_s_fu_533_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_BF_encrypt_fu_385_data_0_read = tmp_402_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_BF_encrypt_fu_385_data_0_read = tmp_407_reg_956;
    end else begin
        grp_BF_encrypt_fu_385_data_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_BF_encrypt_fu_385_data_1_read = tmp_403_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_BF_encrypt_fu_385_data_1_read = tmp_408_reg_961;
    end else begin
        grp_BF_encrypt_fu_385_data_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        in_r_address0 = in_addr_6_reg_847;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        in_r_address0 = in_addr_4_reg_833;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        in_r_address0 = in_addr_23_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        in_r_address0 = in_addr_19_reg_986;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        in_r_address0 = in_addr_22_reg_934;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        in_r_address0 = in_addr_21_reg_929;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28))) begin
        in_r_address0 = ap_const_lv64_56;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27))) begin
        in_r_address0 = ap_const_lv64_54;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state26))) begin
        in_r_address0 = ap_const_lv64_52;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20))) begin
        in_r_address0 = ap_const_lv64_50;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address0 = ap_const_lv64_62;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address0 = ap_const_lv64_60;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address0 = ap_const_lv64_5E;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = ap_const_lv64_5C;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = ap_const_lv64_5A;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        in_r_address0 = ap_const_lv64_58;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        in_r_address1 = in_addr_7_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        in_r_address1 = in_addr_5_reg_838;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        in_r_address1 = in_addr_20_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        in_r_address1 = in_addr_23_reg_1033;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17))) begin
        in_r_address1 = in_addr_24_reg_976;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28))) begin
        in_r_address1 = ap_const_lv64_57;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27))) begin
        in_r_address1 = ap_const_lv64_55;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state26))) begin
        in_r_address1 = ap_const_lv64_53;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20))) begin
        in_r_address1 = ap_const_lv64_51;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address1 = ap_const_lv64_63;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address1 = ap_const_lv64_61;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address1 = ap_const_lv64_5F;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = ap_const_lv64_5D;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = ap_const_lv64_5B;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        in_r_address1 = ap_const_lv64_59;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) | (~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25)) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state30) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state33))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) | (~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25)) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state33))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        in_r_d0 = tmp_4_reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        in_r_d0 = tmp_401_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        in_r_d0 = in_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        in_r_d0 = grp_fu_465_p2;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28))) begin
        in_r_d0 = reg_511;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27))) begin
        in_r_d0 = reg_501;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state26))) begin
        in_r_d0 = reg_496;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25))) begin
        in_r_d0 = {{grp_BF_encrypt_fu_385_ap_return_0[ap_const_lv32_1F : ap_const_lv32_18]}};
    end else begin
        in_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        in_r_d1 = tmp_6_reg_1049;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        in_r_d1 = {{n_2_reg_374[ap_const_lv32_F : ap_const_lv32_8]}};
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        in_r_d1 = tmp_405_reg_1028;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        in_r_d1 = tmp_404_reg_1023;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31))) begin
        in_r_d1 = reg_516;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        in_r_d1 = tmp_411_reg_971;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27))) begin
        in_r_d1 = reg_506;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        in_r_d1 = tmp_410_reg_966;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25))) begin
        in_r_d1 = {{grp_BF_encrypt_fu_385_ap_return_0[ap_const_lv32_17 : ap_const_lv32_10]}};
    end else begin
        in_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) | (~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25)) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state16) & ~(tmp_209_reg_952 == 1'b0)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_208_reg_1009)) | (1'b1 == ap_CS_fsm_state33))) begin
        in_r_we0 = 1'b1;
    end else begin
        in_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) | (~(1'b0 == grp_BF_encrypt_fu_385_ap_done) & (1'b1 == ap_CS_fsm_state25)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state16) & ~(tmp_209_reg_952 == 1'b0)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state28) & ~(1'b0 == tmp_208_reg_1009)) | (1'b1 == ap_CS_fsm_state33))) begin
        in_r_we1 = 1'b1;
    end else begin
        in_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (~(tmp_s_reg_843 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(tmp_207_fu_589_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else if (((tmp_207_fu_589_p2 == 1'b0) & (tmp_209_fu_601_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state20 : begin
            if (~(1'b0 == tmp_206_fu_696_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else if (((1'b0 == tmp_206_fu_696_p2) & (1'b0 == tmp_208_fu_708_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (~(1'b0 == grp_BF_encrypt_fu_385_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign encrypt_fu_521_p5 = {{{{in_r_q1}, {in_r_q0}}, {reg_476}}, {reg_472}};

assign grp_BF_encrypt_fu_385_ap_start = ap_reg_grp_BF_encrypt_fu_385_ap_start;

assign grp_fu_465_p2 = (in_r_q1 ^ in_r_q0);

assign in_addr_4_reg_833 = ap_const_lv64_5C;

assign in_addr_5_reg_838 = ap_const_lv64_5D;

assign in_addr_6_reg_847 = ap_const_lv64_5E;

assign in_addr_7_reg_852 = ap_const_lv64_5F;

assign l_2_fu_690_p2 = ($signed(ap_const_lv32_FFFFFFFF) + $signed(l_1_reg_344));

assign l_3_fu_583_p2 = ($signed(ap_const_lv32_FFFFFFFF) + $signed(l3_reg_314));

assign length_fu_551_p5 = {{{{in_r_q1}, {in_r_q0}}, {reg_492}}, {reg_488}};

assign n_3_cast_fu_773_p1 = n_3_fu_767_p2;

assign n_3_fu_767_p2 = (ap_const_lv3_1 + tmp_409_fu_763_p1);

assign n_4_cast_fu_666_p1 = n_4_fu_660_p2;

assign n_4_fu_660_p2 = (ap_const_lv3_1 + tmp_413_fu_656_p1);

assign n_fu_539_p5 = {{{{reg_484}, {reg_480}}, {reg_476}}, {reg_472}};

assign out_0_rec_cast_fu_567_p1 = out_0_rec_reg_333;

assign out_1_rec_cast_fu_674_p1 = out_1_rec_reg_363;

assign p_rec5_fu_595_p2 = (ap_const_lv32_1 + out_0_rec_reg_333);

assign p_rec_fu_702_p2 = (ap_const_lv32_1 + out_1_rec_reg_363);

assign sum1_cast_fu_578_p1 = $signed(sum1_fu_572_p2);

assign sum1_fu_572_p2 = (ap_const_lv8_28 + tmp_400_fu_563_p1);

assign sum2_cast_fu_758_p1 = $signed(sum2_fu_752_p2);

assign sum2_fu_752_p2 = (ap_const_lv8_50 + tmp_406_fu_748_p1);

assign sum3_cast_fu_651_p1 = $signed(sum3_fu_645_p2);

assign sum3_fu_645_p2 = (ap_const_lv8_50 + tmp_412_fu_641_p1);

assign sum_cast_fu_685_p1 = $signed(sum_fu_679_p2);

assign sum_fu_679_p2 = (ap_const_lv8_28 + tmp_fu_670_p1);

assign tmp_206_fu_696_p2 = ((l_1_reg_344 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_207_fu_589_p2 = ((l3_reg_314 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_208_fu_708_p2 = ((n_1_reg_353 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_209_fu_601_p2 = ((n1_reg_323 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_400_fu_563_p1 = out_0_rec_reg_333[7:0];

assign tmp_401_fu_777_p1 = n_2_reg_374[7:0];

assign tmp_402_fu_714_p5 = {{{{reg_472}, {reg_476}}, {reg_480}}, {reg_484}};

assign tmp_403_fu_727_p5 = {{{{reg_488}, {reg_492}}, {in_r_q0}}, {in_r_q1}};

assign tmp_404_fu_740_p1 = grp_BF_encrypt_fu_385_ap_return_0[7:0];

assign tmp_405_fu_744_p1 = grp_BF_encrypt_fu_385_ap_return_1[7:0];

assign tmp_406_fu_748_p1 = n_1_reg_353[7:0];

assign tmp_407_fu_607_p5 = {{{{reg_472}, {reg_476}}, {reg_480}}, {reg_484}};

assign tmp_408_fu_620_p5 = {{{{reg_488}, {reg_492}}, {in_r_q0}}, {in_r_q1}};

assign tmp_409_fu_763_p1 = n_1_reg_353[2:0];

assign tmp_410_fu_633_p1 = grp_BF_encrypt_fu_385_ap_return_0[7:0];

assign tmp_411_fu_637_p1 = grp_BF_encrypt_fu_385_ap_return_1[7:0];

assign tmp_412_fu_641_p1 = n1_reg_323[7:0];

assign tmp_413_fu_656_p1 = n1_reg_323[2:0];

assign tmp_fu_670_p1 = out_1_rec_reg_363[7:0];

assign tmp_s_fu_533_p2 = ((encrypt_fu_521_p5 == ap_const_lv32_0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    n_4_cast_reg_981[31:3] <= 29'b00000000000000000000000000000;
    n_3_cast_reg_1039[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //BF_cfb64_encrypt
