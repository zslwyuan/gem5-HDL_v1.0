/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off STMTDLY */
/* verilator lint_off UNUSED */
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module estimateDiv128To64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a0,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 140'b1;
parameter    ap_ST_fsm_state2 = 140'b10;
parameter    ap_ST_fsm_state3 = 140'b100;
parameter    ap_ST_fsm_state4 = 140'b1000;
parameter    ap_ST_fsm_state5 = 140'b10000;
parameter    ap_ST_fsm_state6 = 140'b100000;
parameter    ap_ST_fsm_state7 = 140'b1000000;
parameter    ap_ST_fsm_state8 = 140'b10000000;
parameter    ap_ST_fsm_state9 = 140'b100000000;
parameter    ap_ST_fsm_state10 = 140'b1000000000;
parameter    ap_ST_fsm_state11 = 140'b10000000000;
parameter    ap_ST_fsm_state12 = 140'b100000000000;
parameter    ap_ST_fsm_state13 = 140'b1000000000000;
parameter    ap_ST_fsm_state14 = 140'b10000000000000;
parameter    ap_ST_fsm_state15 = 140'b100000000000000;
parameter    ap_ST_fsm_state16 = 140'b1000000000000000;
parameter    ap_ST_fsm_state17 = 140'b10000000000000000;
parameter    ap_ST_fsm_state18 = 140'b100000000000000000;
parameter    ap_ST_fsm_state19 = 140'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 140'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 140'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 140'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 140'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 140'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 140'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 140'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 140'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 140'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 140'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 140'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 140'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 140'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 140'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 140'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 140'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 140'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 140'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 140'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 140'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 140'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 140'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 140'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 140'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 140'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 140'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 140'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 140'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 140'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 140'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 140'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 140'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 140'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 140'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 140'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 140'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 140'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 140'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 140'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 140'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 140'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 140'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 140'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 140'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 140'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 140'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 140'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 140'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 140'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 140'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state108 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state109 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state110 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state111 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state112 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state113 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state114 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state115 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state116 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state117 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state118 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state119 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state120 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state121 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state122 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state123 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state124 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state125 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state126 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state127 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state128 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state129 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state130 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state131 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state132 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state133 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state134 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state135 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state136 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state137 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state138 = 140'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state139 = 140'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state140 = 140'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_const_lv32_47 = 32'b1000111;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv64_FFFFFFFF00000000 = 64'b1111111111111111111111111111111100000000000000000000000000000000;
parameter    ap_const_lv32_8B = 32'b10001011;
parameter    ap_const_lv64_FFFFFFFF = 64'b11111111111111111111111111111111;
parameter    ap_const_lv64_FFFFFFFFFFFFFFFF = 64'b1111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv64_20 = 64'b100000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] a0;
input  [63:0] b;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [139:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] tmp_fu_103_p2;
reg   [0:0] tmp_reg_340;
wire   [63:0] b0_fu_119_p1;
reg   [63:0] b0_reg_344;
wire   [32:0] b0_cast_fu_123_p1;
reg   [32:0] b0_cast_reg_351;
wire   [63:0] tmp_s_fu_127_p3;
reg   [63:0] tmp_s_reg_356;
wire   [63:0] tmp_87_fu_147_p2;
wire   [0:0] ap_CS_fsm_state68;
wire   [0:0] ap_CS_fsm_state69;
wire   [63:0] tmp_53_i_fu_170_p1;
wire   [63:0] grp_fu_174_p2;
reg   [63:0] zMiddleA_reg_380;
wire   [0:0] ap_CS_fsm_state71;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] z0_reg_385;
reg   [31:0] tmp_58_i_reg_390;
wire   [63:0] rem1_fu_208_p2;
wire   [0:0] ap_CS_fsm_state72;
wire   [63:0] rem0_fu_233_p2;
wire   [63:0] b1_fu_239_p2;
reg   [63:0] b1_reg_405;
wire   [63:0] z_fu_252_p2;
wire   [0:0] ap_CS_fsm_state73;
wire   [0:0] tmp_91_fu_244_p3;
wire   [63:0] z1_fu_258_p2;
wire   [63:0] rem0_2_fu_282_p2;
wire   [63:0] rem0_1_fu_302_p3;
wire   [0:0] tmp_65_fu_310_p2;
reg   [0:0] tmp_65_reg_433;
reg   [63:0] z_3_reg_40;
wire   [0:0] tmp_60_fu_135_p2;
reg   [63:0] a1_assign_reg_52;
reg   [63:0] a0_assign_reg_61;
reg   [63:0] z3_reg_70;
wire   [63:0] grp_fu_315_p2;
reg   [63:0] tmp_67_phi_fu_85_p4;
reg   [63:0] tmp_67_reg_81;
wire   [0:0] ap_CS_fsm_state140;
wire   [63:0] z_2_fu_321_p2;
reg   [63:0] p_0_phi_fu_96_p4;
reg   [63:0] p_0_reg_92;
wire   [31:0] aHigh_fu_109_p4;
wire   [31:0] grp_fu_141_p1;
wire   [63:0] grp_fu_141_p2;
wire   [31:0] aLow_fu_153_p1;
wire   [31:0] bHigh_fu_156_p4;
wire   [31:0] grp_fu_174_p0;
wire   [31:0] grp_fu_174_p1;
wire   [31:0] grp_fu_180_p0;
wire   [31:0] grp_fu_180_p1;
wire   [63:0] tmp_68_fu_195_p1;
wire   [63:0] zMiddleA_4_fu_198_p2;
wire   [0:0] tmp_i1_fu_214_p2;
wire   [63:0] z0_4_fu_203_p2;
wire   [63:0] tmp_1_i_fu_228_p2;
wire   [63:0] p_neg_i_fu_220_p3;
wire   [0:0] tmp_i_fu_263_p2;
wire   [32:0] tmp_i12_cast_fu_269_p1;
wire   [32:0] tmp_17_fu_273_p2;
wire   [63:0] p_cast_fu_278_p1;
wire   [31:0] tmp_92_fu_288_p1;
wire   [31:0] tmp_64_fu_292_p4;
wire   [31:0] grp_fu_315_p1;
reg    grp_fu_141_ap_start;
wire    grp_fu_141_ap_done;
reg    grp_fu_315_ap_start;
wire    grp_fu_315_ap_done;
reg   [63:0] ap_return_preg;
reg   [139:0] ap_NS_fsm;
wire   [63:0] grp_fu_141_p10;
wire   [63:0] grp_fu_174_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 140'b1;
#0 ap_return_preg = 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

float64_div_udiv_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
float64_div_udiv_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_141_ap_start),
    .done(grp_fu_141_ap_done),
    .din0(a0),
    .din1(grp_fu_141_p1),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

float64_div_mul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
float64_div_mul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .din1(grp_fu_174_p1),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

float64_div_mul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
float64_div_mul_3cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

float64_div_udiv_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
float64_div_udiv_bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_315_ap_start),
    .done(grp_fu_315_ap_done),
    .din0(rem0_1_fu_302_p3),
    .din1(grp_fu_315_p1),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv64_0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state140)) begin
            ap_return_preg <= p_0_phi_fu_96_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_91_fu_244_p3))) begin
        a0_assign_reg_61 <= rem0_2_fu_282_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        a0_assign_reg_61 <= rem0_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_91_fu_244_p3))) begin
        a1_assign_reg_52 <= z1_fu_258_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        a1_assign_reg_52 <= rem1_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (tmp_fu_103_p2 == 1'b0))) begin
        p_0_reg_92 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    end else if (((1'b1 == ap_CS_fsm_state140) & ~(tmp_reg_340 == 1'b0))) begin
        p_0_reg_92 <= z_2_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_91_fu_244_p3) & (1'b0 == tmp_65_fu_310_p2))) begin
        tmp_67_reg_81 <= ap_const_lv64_FFFFFFFF;
    end else if (((1'b1 == ap_CS_fsm_state140) & ~(tmp_reg_340 == 1'b0) & ~(1'b0 == tmp_65_reg_433))) begin
        tmp_67_reg_81 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & ~(1'b0 == tmp_91_fu_244_p3))) begin
        z3_reg_70 <= z_fu_252_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        z3_reg_70 <= z_3_reg_40;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_103_p2 == 1'b0) & (1'b0 == tmp_60_fu_135_p2))) begin
                z_3_reg_40[32] <= 1'b1;
        z_3_reg_40[33] <= 1'b1;
        z_3_reg_40[34] <= 1'b1;
        z_3_reg_40[35] <= 1'b1;
        z_3_reg_40[36] <= 1'b1;
        z_3_reg_40[37] <= 1'b1;
        z_3_reg_40[38] <= 1'b1;
        z_3_reg_40[39] <= 1'b1;
        z_3_reg_40[40] <= 1'b1;
        z_3_reg_40[41] <= 1'b1;
        z_3_reg_40[42] <= 1'b1;
        z_3_reg_40[43] <= 1'b1;
        z_3_reg_40[44] <= 1'b1;
        z_3_reg_40[45] <= 1'b1;
        z_3_reg_40[46] <= 1'b1;
        z_3_reg_40[47] <= 1'b1;
        z_3_reg_40[48] <= 1'b1;
        z_3_reg_40[49] <= 1'b1;
        z_3_reg_40[50] <= 1'b1;
        z_3_reg_40[51] <= 1'b1;
        z_3_reg_40[52] <= 1'b1;
        z_3_reg_40[53] <= 1'b1;
        z_3_reg_40[54] <= 1'b1;
        z_3_reg_40[55] <= 1'b1;
        z_3_reg_40[56] <= 1'b1;
        z_3_reg_40[57] <= 1'b1;
        z_3_reg_40[58] <= 1'b1;
        z_3_reg_40[59] <= 1'b1;
        z_3_reg_40[60] <= 1'b1;
        z_3_reg_40[61] <= 1'b1;
        z_3_reg_40[62] <= 1'b1;
        z_3_reg_40[63] <= 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
                z_3_reg_40[63 : 32] <= tmp_87_fu_147_p2[63 : 32];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_103_p2 == 1'b0))) begin
        b0_cast_reg_351[31 : 0] <= b0_cast_fu_123_p1[31 : 0];
        b0_reg_344[31 : 0] <= b0_fu_119_p1[31 : 0];
        tmp_s_reg_356[63 : 32] <= tmp_s_fu_127_p3[63 : 32];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        b1_reg_405[63 : 32] <= b1_fu_239_p2[63 : 32];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_58_i_reg_390 <= {{grp_fu_174_p2[ap_const_lv32_3F : ap_const_lv32_20]}};
        z0_reg_385 <= grp_fu_180_p2;
        zMiddleA_reg_380 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_91_fu_244_p3))) begin
        tmp_65_reg_433 <= tmp_65_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_340 <= tmp_fu_103_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state140))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        ap_return = p_0_phi_fu_96_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_103_p2 == 1'b0) & ~(1'b0 == tmp_60_fu_135_p2))) begin
        grp_fu_141_ap_start = 1'b1;
    end else begin
        grp_fu_141_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_91_fu_244_p3) & ~(1'b0 == tmp_65_fu_310_p2))) begin
        grp_fu_315_ap_start = 1'b1;
    end else begin
        grp_fu_315_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) & ~(tmp_reg_340 == 1'b0))) begin
        p_0_phi_fu_96_p4 = z_2_fu_321_p2;
    end else begin
        p_0_phi_fu_96_p4 = p_0_reg_92;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) & ~(tmp_reg_340 == 1'b0) & ~(1'b0 == tmp_65_reg_433))) begin
        tmp_67_phi_fu_85_p4 = grp_fu_315_p2;
    end else begin
        tmp_67_phi_fu_85_p4 = tmp_67_reg_81;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(ap_start == 1'b0) & ~(tmp_fu_103_p2 == 1'b0) & (1'b0 == tmp_60_fu_135_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else if ((~(ap_start == 1'b0) & ~(tmp_fu_103_p2 == 1'b0) & ~(1'b0 == tmp_60_fu_135_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(ap_start == 1'b0) & (tmp_fu_103_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b0 == tmp_91_fu_244_p3) & (1'b0 == tmp_65_fu_310_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else if (((1'b0 == tmp_91_fu_244_p3) & ~(1'b0 == tmp_65_fu_310_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign aHigh_fu_109_p4 = {{b[ap_const_lv32_3F : ap_const_lv32_20]}};

assign aLow_fu_153_p1 = b[31:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state140 = ap_CS_fsm[ap_const_lv32_8B];

assign ap_CS_fsm_state68 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state69 = ap_CS_fsm[ap_const_lv32_44];

assign ap_CS_fsm_state71 = ap_CS_fsm[ap_const_lv32_46];

assign ap_CS_fsm_state72 = ap_CS_fsm[ap_const_lv32_47];

assign ap_CS_fsm_state73 = ap_CS_fsm[ap_const_lv32_48];

assign b0_cast_fu_123_p1 = aHigh_fu_109_p4;

assign b0_fu_119_p1 = aHigh_fu_109_p4;

assign b1_fu_239_p2 = b << ap_const_lv64_20;

assign bHigh_fu_156_p4 = {{z_3_reg_40[ap_const_lv32_3F : ap_const_lv32_20]}};

assign grp_fu_141_p1 = grp_fu_141_p10;

assign grp_fu_141_p10 = aHigh_fu_109_p4;

assign grp_fu_174_p0 = grp_fu_174_p00;

assign grp_fu_174_p00 = aLow_fu_153_p1;

assign grp_fu_174_p1 = tmp_53_i_fu_170_p1;

assign grp_fu_180_p0 = b0_reg_344;

assign grp_fu_180_p1 = tmp_53_i_fu_170_p1;

assign grp_fu_315_p1 = b0_reg_344;

assign p_cast_fu_278_p1 = tmp_17_fu_273_p2;

assign p_neg_i_fu_220_p3 = ((tmp_i1_fu_214_p2[0:0] === 1'b1) ? ap_const_lv64_FFFFFFFFFFFFFFFF : ap_const_lv64_0);

assign rem0_1_fu_302_p3 = {{tmp_92_fu_288_p1}, {tmp_64_fu_292_p4}};

assign rem0_2_fu_282_p2 = (a0_assign_reg_61 + p_cast_fu_278_p1);

assign rem0_fu_233_p2 = (tmp_1_i_fu_228_p2 + p_neg_i_fu_220_p3);

assign rem1_fu_208_p2 = (ap_const_lv64_0 - zMiddleA_4_fu_198_p2);

assign tmp_17_fu_273_p2 = (tmp_i12_cast_fu_269_p1 + b0_cast_reg_351);

assign tmp_1_i_fu_228_p2 = (a0 - z0_4_fu_203_p2);

assign tmp_53_i_fu_170_p1 = bHigh_fu_156_p4;

assign tmp_60_fu_135_p2 = ((tmp_s_fu_127_p3 > a0) ? 1'b1 : 1'b0);

assign tmp_64_fu_292_p4 = {{a1_assign_reg_52[ap_const_lv32_3F : ap_const_lv32_20]}};

assign tmp_65_fu_310_p2 = ((tmp_s_reg_356 > rem0_1_fu_302_p3) ? 1'b1 : 1'b0);

assign tmp_68_fu_195_p1 = tmp_58_i_reg_390;

assign tmp_87_fu_147_p2 = grp_fu_141_p2 << ap_const_lv64_20;

assign tmp_91_fu_244_p3 = a0_assign_reg_61[ap_const_lv32_3F];

assign tmp_92_fu_288_p1 = a0_assign_reg_61[31:0];

assign tmp_fu_103_p2 = ((b > a0) ? 1'b1 : 1'b0);

assign tmp_i12_cast_fu_269_p1 = tmp_i_fu_263_p2;

assign tmp_i1_fu_214_p2 = ((zMiddleA_4_fu_198_p2 != ap_const_lv64_0) ? 1'b1 : 1'b0);

assign tmp_i_fu_263_p2 = ((z1_fu_258_p2 < a1_assign_reg_52) ? 1'b1 : 1'b0);

assign tmp_s_fu_127_p3 = {{aHigh_fu_109_p4}, {ap_const_lv32_0}};

assign z0_4_fu_203_p2 = (z0_reg_385 + tmp_68_fu_195_p1);

assign z1_fu_258_p2 = (b1_reg_405 + a1_assign_reg_52);

assign zMiddleA_4_fu_198_p2 = zMiddleA_reg_380 << ap_const_lv64_20;

assign z_2_fu_321_p2 = (tmp_67_phi_fu_85_p4 | z3_reg_70);

assign z_fu_252_p2 = ($signed(z3_reg_70) + $signed(ap_const_lv64_FFFFFFFF00000000));

always @ (posedge ap_clk) begin
    b0_reg_344[63:32] <= 32'b00000000000000000000000000000000;
    b0_cast_reg_351[32] <= 1'b0;
    tmp_s_reg_356[31:0] <= 32'b00000000000000000000000000000000;
    b1_reg_405[31:0] <= 32'b00000000000000000000000000000000;
    z_3_reg_40[31:0] <= 32'b00000000000000000000000000000000;
end

endmodule //estimateDiv128To64
