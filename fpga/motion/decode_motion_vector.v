// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================
/* verilator lint_off UNUSED */
/* verilator lint_off WIDTH */
/* verilator lint_off DECLFILENAME */
/* verilator lint_off PINCONNECTEMPTY */
`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="decode_motion_vector,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.113500,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=310,HLS_SYN_LUT=927}" *)

module decode_motion_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_address0,
        buff_ce0,
        buff_q0,
        buff_address1,
        buff_ce1,
        buff_q1,
        m,
        y,
        y_ap_vld,
        n,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] buff_address0;
output   buff_ce0;
input  [31:0] buff_q0;
output  [2:0] buff_address1;
output   buff_ce1;
input  [31:0] buff_q1;
input  [31:0] m;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] buff_address0;
reg buff_ce0;
reg[2:0] buff_address1;
reg buff_ce1;
reg y_ap_vld;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_57;
reg   [0:0] tmp_2_reg_396;
wire   [4:0] tmp_6_fu_129_p1;
reg   [4:0] tmp_6_reg_401;
wire   [4:0] tmp_13_fu_133_p1;
reg   [4:0] tmp_13_reg_406;
wire   [0:0] tmp_fu_137_p2;
reg   [0:0] tmp_reg_411;
wire   [31:0] r_size_fu_169_p3;
reg   [31:0] r_size_reg_422;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_76;
wire   [31:0] vec_fu_190_p3;
reg   [31:0] vec_reg_429;
reg   [31:0] buff_load_3_reg_436;
wire   [31:0] tmp_4_fu_197_p2;
reg   [31:0] tmp_4_reg_443;
reg   [0:0] tmp_17_reg_453;
wire   [31:0] lim_fu_211_p2;
reg   [31:0] lim_reg_458;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_94;
wire   [0:0] tmp_3_fu_216_p2;
reg   [0:0] tmp_3_reg_464;
wire   [31:0] vec_1_fu_236_p2;
reg   [31:0] vec_1_reg_471;
wire   [31:0] vec_4_fu_263_p2;
reg   [31:0] vec_4_reg_478;
wire   [31:0] tmp_10_fu_269_p2;
reg   [31:0] tmp_10_reg_485;
wire   [0:0] sel_tmp2_fu_275_p2;
reg   [0:0] sel_tmp2_reg_490;
wire   [31:0] vec_7_fu_337_p3;
reg   [31:0] vec_7_reg_495;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_113;
wire   [0:0] sel_tmp7_fu_345_p2;
reg   [0:0] sel_tmp7_reg_500;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_131;
wire   [4:0] tmp_16_fu_150_p2;
wire   [31:0] p_and_t_fu_155_p3;
wire   [31:0] p_neg_t_fu_163_p2;
wire   [31:0] p_and_f_fu_143_p3;
wire   [30:0] tmp_7_fu_176_p4;
wire  signed [31:0] tmp_1_fu_186_p1;
wire   [31:0] tmp_5_fu_221_p2;
wire   [31:0] tmp2_fu_231_p2;
wire   [31:0] tmp1_fu_225_p2;
wire   [31:0] tmp_8_fu_242_p2;
wire   [31:0] p_neg2_fu_252_p2;
wire   [31:0] tmp_s_fu_247_p2;
wire   [31:0] p_neg3_fu_257_p2;
wire   [31:0] tmp_18_fu_284_p2;
wire   [0:0] tmp_9_fu_280_p2;
wire   [0:0] sel_tmp_fu_303_p2;
wire   [0:0] sel_tmp1_fu_309_p2;
wire   [31:0] vec_2_fu_289_p2;
wire   [0:0] tmp_11_fu_294_p2;
wire   [0:0] sel_tmp3_fu_321_p2;
wire   [0:0] tmp3_fu_326_p2;
wire   [0:0] sel_tmp5_fu_332_p2;
wire   [31:0] vec_5_fu_298_p2;
wire   [31:0] vec_6_fu_314_p3;
wire   [31:0] vec_8_fu_350_p3;
wire   [31:0] vec_3_fu_355_p3;
wire   [31:0] tmp_19_fu_361_p2;
reg   [5:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        buff_load_3_reg_436 <= buff_q1;
        r_size_reg_422 <= r_size_fu_169_p3;
        tmp_17_reg_453 <= buff_q1[ap_const_lv32_1F];
        tmp_4_reg_443 <= tmp_4_fu_197_p2;
        vec_reg_429 <= vec_fu_190_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        lim_reg_458 <= lim_fu_211_p2;
        sel_tmp2_reg_490 <= sel_tmp2_fu_275_p2;
        tmp_10_reg_485 <= tmp_10_fu_269_p2;
        tmp_3_reg_464 <= tmp_3_fu_216_p2;
        vec_1_reg_471 <= vec_1_fu_236_p2;
        vec_4_reg_478 <= vec_4_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (sel_tmp2_reg_490 == ap_const_lv1_0))) begin
        sel_tmp7_reg_500 <= sel_tmp7_fu_345_p2;
        vec_7_reg_495 <= vec_7_fu_337_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_13_reg_406 <= tmp_13_fu_133_p1;
        tmp_2_reg_396 <= buff_q0[ap_const_lv32_1F];
        tmp_6_reg_401 <= tmp_6_fu_129_p1;
        tmp_reg_411 <= tmp_fu_137_p2;
    end
end

always @ (ap_sig_cseq_ST_st6_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st6_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_57) begin
    if (ap_sig_bdd_57) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_76) begin
    if (ap_sig_bdd_76) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_94) begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_113) begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_131) begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        buff_address0 = ap_const_lv64_3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        buff_address0 = ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        buff_address0 = ap_const_lv64_1;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        buff_address1 = ap_const_lv64_2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        buff_address1 = ap_const_lv64_4;
    end else begin
        buff_address1 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st3_fsm_2) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        buff_ce0 = ap_const_logic_1;
    end else begin
        buff_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        buff_ce1 = ap_const_logic_1;
    end else begin
        buff_ce1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st6_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (n + m);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_57 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_76 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign lim_fu_211_p2 = ap_const_lv32_10 << r_size_reg_422;

assign p_and_f_fu_143_p3 = {{ap_const_lv27_0}, {tmp_6_reg_401}};

assign p_and_t_fu_155_p3 = {{ap_const_lv27_0}, {tmp_16_fu_150_p2}};

assign p_neg2_fu_252_p2 = ($signed(ap_const_lv32_FFFFFFFF) + $signed(vec_reg_429));

assign p_neg3_fu_257_p2 = (p_neg2_fu_252_p2 - tmp_s_fu_247_p2);

assign p_neg_t_fu_163_p2 = (ap_const_lv32_0 - p_and_t_fu_155_p3);

assign r_size_fu_169_p3 = ((tmp_2_reg_396[0:0] === 1'b1) ? p_neg_t_fu_163_p2 : p_and_f_fu_143_p3);

assign sel_tmp1_fu_309_p2 = (tmp_3_reg_464 & sel_tmp_fu_303_p2);

assign sel_tmp2_fu_275_p2 = (buff_load_3_reg_436 == ap_const_lv32_0? 1'b1: 1'b0);

assign sel_tmp3_fu_321_p2 = (tmp_3_reg_464 ^ ap_const_lv1_1);

assign sel_tmp5_fu_332_p2 = (tmp3_fu_326_p2 & tmp_17_reg_453);

assign sel_tmp7_fu_345_p2 = (tmp_3_reg_464 & tmp_9_fu_280_p2);

assign sel_tmp_fu_303_p2 = (tmp_9_fu_280_p2 ^ ap_const_lv1_1);

assign tmp1_fu_225_p2 = (buff_q0 + tmp_5_fu_221_p2);

assign tmp2_fu_231_p2 = (ap_const_lv32_1 + vec_reg_429);

assign tmp3_fu_326_p2 = (tmp_11_fu_294_p2 & sel_tmp3_fu_321_p2);

assign tmp_10_fu_269_p2 = (ap_const_lv32_0 - lim_fu_211_p2);

assign tmp_11_fu_294_p2 = ($signed(vec_4_reg_478) < $signed(tmp_10_reg_485)? 1'b1: 1'b0);

assign tmp_13_fu_133_p1 = buff_q0[4:0];

assign tmp_16_fu_150_p2 = (ap_const_lv5_0 - tmp_13_reg_406);

assign tmp_18_fu_284_p2 = lim_reg_458 << ap_const_lv32_1;

assign tmp_19_fu_361_p2 = vec_3_fu_355_p3 << ap_const_lv32_1;

assign tmp_1_fu_186_p1 = $signed(tmp_7_fu_176_p4);

assign tmp_3_fu_216_p2 = ($signed(buff_load_3_reg_436) > $signed(32'b00000000000000000000000000000000)? 1'b1: 1'b0);

assign tmp_4_fu_197_p2 = ($signed(ap_const_lv32_FFFFFFFF) + $signed(buff_q1));

assign tmp_5_fu_221_p2 = tmp_4_reg_443 << r_size_reg_422;

assign tmp_6_fu_129_p1 = buff_q0[4:0];

assign tmp_7_fu_176_p4 = {{buff_q0[ap_const_lv32_1F : ap_const_lv32_1]}};

assign tmp_8_fu_242_p2 = (buff_load_3_reg_436 ^ ap_const_lv32_FFFFFFFF);

assign tmp_9_fu_280_p2 = ($signed(vec_1_reg_471) < $signed(lim_reg_458)? 1'b1: 1'b0);

assign tmp_fu_137_p2 = (buff_q1 == ap_const_lv32_0? 1'b1: 1'b0);

assign tmp_s_fu_247_p2 = tmp_8_fu_242_p2 << r_size_reg_422;

assign vec_1_fu_236_p2 = (tmp2_fu_231_p2 + tmp1_fu_225_p2);

assign vec_2_fu_289_p2 = (vec_1_reg_471 - tmp_18_fu_284_p2);

assign vec_3_fu_355_p3 = ((sel_tmp2_reg_490[0:0] === 1'b1) ? vec_reg_429 : vec_8_fu_350_p3);

assign vec_4_fu_263_p2 = (p_neg3_fu_257_p2 - buff_q0);

assign vec_5_fu_298_p2 = (vec_4_reg_478 + tmp_18_fu_284_p2);

assign vec_6_fu_314_p3 = ((sel_tmp1_fu_309_p2[0:0] === 1'b1) ? vec_2_fu_289_p2 : vec_4_reg_478);

assign vec_7_fu_337_p3 = ((sel_tmp5_fu_332_p2[0:0] === 1'b1) ? vec_5_fu_298_p2 : vec_6_fu_314_p3);

assign vec_8_fu_350_p3 = ((sel_tmp7_reg_500[0:0] === 1'b1) ? vec_1_reg_471 : vec_7_reg_495);

assign vec_fu_190_p3 = ((tmp_reg_411[0:0] === 1'b1) ? buff_q0 : tmp_1_fu_186_p1);

assign y = ((tmp_reg_411[0:0] === 1'b1) ? vec_3_fu_355_p3 : tmp_19_fu_361_p2);


endmodule //decode_motion_vector

