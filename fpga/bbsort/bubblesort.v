// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */
(* CORE_GENERATION_INFO="bubblesort,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqku115-rlf1924-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.782000,HLS_SYN_LAT=223,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=224}" *)

module bubblesort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Array_r_address0,
        Array_r_ce0,
        Array_r_we0,
        Array_r_d0,
        Array_r_q0,
        Array_r_address1,
        Array_r_ce1,
        Array_r_we1,
        Array_r_d1,
        Array_r_q1,
        m,
        n,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv5_13 = 5'b10011;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv32_4 = 32'b100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Array_r_address0;
output   Array_r_ce0;
output   Array_r_we0;
output  [31:0] Array_r_d0;
input  [31:0] Array_r_q0;
output  [4:0] Array_r_address1;
output   Array_r_ce1;
output   Array_r_we1;
output  [31:0] Array_r_d1;
input  [31:0] Array_r_q1;
input  [31:0] m;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Array_r_address0;
reg Array_r_ce0;
reg Array_r_we0;
reg[4:0] Array_r_address1;
reg Array_r_ce1;
reg Array_r_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [4:0] i_1_fu_160_p2;
reg   [4:0] i_1_reg_234;
wire   [0:0] ap_CS_fsm_state2;
wire   [4:0] tmp_1_fu_166_p2;
reg   [4:0] tmp_1_reg_239;
wire   [0:0] tmp_fu_154_p2;
wire   [4:0] Index_1_fu_178_p2;
reg   [4:0] Index_1_reg_247;
wire   [0:0] ap_CS_fsm_state3;
reg   [4:0] Array_addr_reg_255;
wire   [0:0] tmp_2_fu_172_p2;
wire   [0:0] tmp_3_fu_184_p2;
reg   [4:0] Array_addr_1_reg_260;
reg   [31:0] Sorted_reg_83;
wire   [0:0] tmp_4_fu_199_p2;
reg   [4:0] i_reg_95;
reg   [31:0] Sorted_1_reg_106;
reg   [31:0] Sorted_1_be_phi_fu_134_p4;
wire   [0:0] ap_CS_fsm_state4;
reg   [4:0] Index_reg_119;
wire   [0:0] tmp_8_fu_205_p2;
reg   [31:0] Sorted_3_reg_143;
wire   [63:0] tmp_5_fu_189_p1;
wire   [63:0] tmp_7_fu_194_p1;
wire   [0:0] ap_CS_fsm_state5;
wire   [31:0] tmp1_fu_211_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Index_reg_119 <= Index_1_reg_247;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_154_p2 == 1'b0))) begin
        Index_reg_119 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Sorted_1_reg_106 <= Sorted_1_be_phi_fu_134_p4;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_154_p2 == 1'b0))) begin
        Sorted_1_reg_106 <= ap_const_lv32_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((1'b0 == tmp_2_fu_172_p2) & ~(1'b0 == tmp_4_fu_199_p2)) | (~(1'b0 == tmp_3_fu_184_p2) & ~(1'b0 == tmp_4_fu_199_p2))))) begin
        Sorted_3_reg_143 <= Sorted_1_reg_106;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_154_p2 == 1'b0))) begin
        Sorted_3_reg_143 <= Sorted_reg_83;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((1'b0 == tmp_2_fu_172_p2) & (1'b0 == tmp_4_fu_199_p2)) | ((1'b0 == tmp_4_fu_199_p2) & ~(1'b0 == tmp_3_fu_184_p2))))) begin
        Sorted_reg_83 <= Sorted_1_reg_106;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        Sorted_reg_83 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((1'b0 == tmp_2_fu_172_p2) & (1'b0 == tmp_4_fu_199_p2)) | ((1'b0 == tmp_4_fu_199_p2) & ~(1'b0 == tmp_3_fu_184_p2))))) begin
        i_reg_95 <= i_1_reg_234;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_95 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_2_fu_172_p2) & (1'b0 == tmp_3_fu_184_p2))) begin
        Array_addr_1_reg_260 <= tmp_7_fu_194_p1;
        Array_addr_reg_255 <= tmp_5_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Index_1_reg_247 <= Index_1_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_234 <= i_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_154_p2 == 1'b0))) begin
        tmp_1_reg_239 <= tmp_1_fu_166_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Array_r_address0 = Array_addr_reg_255;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Array_r_address0 = tmp_5_fu_189_p1;
    end else begin
        Array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Array_r_address1 = Array_addr_1_reg_260;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Array_r_address1 = tmp_7_fu_194_p1;
    end else begin
        Array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        Array_r_ce0 = 1'b1;
    end else begin
        Array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        Array_r_ce1 = 1'b1;
    end else begin
        Array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_8_fu_205_p2))) begin
        Array_r_we0 = 1'b1;
    end else begin
        Array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_8_fu_205_p2))) begin
        Array_r_we1 = 1'b1;
    end else begin
        Array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'b0 == tmp_8_fu_205_p2)) begin
            Sorted_1_be_phi_fu_134_p4 = Sorted_1_reg_106;
        end else if (~(1'b0 == tmp_8_fu_205_p2)) begin
            Sorted_1_be_phi_fu_134_p4 = ap_const_lv32_0;
        end else begin
            Sorted_1_be_phi_fu_134_p4 = 'bx;
        end
    end else begin
        Sorted_1_be_phi_fu_134_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_154_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((((1'b0 == tmp_2_fu_172_p2) & (1'b0 == tmp_4_fu_199_p2)) | ((1'b0 == tmp_4_fu_199_p2) & ~(1'b0 == tmp_3_fu_184_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((((1'b0 == tmp_2_fu_172_p2) & ~(1'b0 == tmp_4_fu_199_p2)) | (~(1'b0 == tmp_3_fu_184_p2) & ~(1'b0 == tmp_4_fu_199_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Array_r_d0 = Array_r_q1;

assign Array_r_d1 = Array_r_q0;

assign Index_1_fu_178_p2 = (Index_reg_119 + ap_const_lv5_1);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_return = (tmp1_fu_211_p2 + n);

assign i_1_fu_160_p2 = (i_reg_95 + ap_const_lv5_1);

assign tmp1_fu_211_p2 = (Sorted_3_reg_143 + m);

assign tmp_1_fu_166_p2 = ($signed(ap_const_lv5_14) - $signed(i_reg_95));

assign tmp_2_fu_172_p2 = ((Index_reg_119 < ap_const_lv5_13) ? 1'b1 : 1'b0);

assign tmp_3_fu_184_p2 = ((Index_reg_119 > tmp_1_reg_239) ? 1'b1 : 1'b0);

assign tmp_4_fu_199_p2 = ((Sorted_1_reg_106 == ap_const_lv32_1) ? 1'b1 : 1'b0);

assign tmp_5_fu_189_p1 = Index_reg_119;

assign tmp_7_fu_194_p1 = Index_1_fu_178_p2;

assign tmp_8_fu_205_p2 = (($signed(Array_r_q0) > $signed(Array_r_q1)) ? 1'b1 : 1'b0);

assign tmp_fu_154_p2 = ((i_reg_95 < ap_const_lv5_13) ? 1'b1 : 1'b0);

endmodule //bubblesort
