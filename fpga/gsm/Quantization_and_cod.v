/* verilator lint_off UNUSED */
/* verilator lint_off WIDTH */
/* verilator lint_off DECLFILENAME */
/* verilator lint_off STMTDLY */
/* verilator lint_off UNDRIVEN */
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Quantization_and_cod (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LAR_address0,
        LAR_ce0,
        LAR_we0,
        LAR_d0,
        LAR_q0,
        LAR_address1,
        LAR_ce1,
        LAR_we1,
        LAR_d1,
        LAR_q1
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_state5 = 8'b10000;
parameter    ap_ST_fsm_state6 = 8'b100000;
parameter    ap_ST_fsm_state7 = 8'b1000000;
parameter    ap_ST_fsm_state8 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv13_800 = 13'b100000000000;
parameter    ap_const_lv13_5E = 13'b1011110;
parameter    ap_const_lv13_1EAB = 13'b1111010101011;
parameter    ap_const_lv13_100 = 13'b100000000;
parameter    ap_const_lv13_1600 = 13'b1011000000000;
parameter    ap_const_lv13_1900 = 13'b1100100000000;
parameter    ap_const_lv13_1B88 = 13'b1101110001000;
parameter    ap_const_lv64_A0 = 64'b10100000;
parameter    ap_const_lv64_A1 = 64'b10100001;
parameter    ap_const_lv64_A2 = 64'b10100010;
parameter    ap_const_lv64_A3 = 64'b10100011;
parameter    ap_const_lv64_A4 = 64'b10100100;
parameter    ap_const_lv64_A5 = 64'b10100101;
parameter    ap_const_lv64_A6 = 64'b10100110;
parameter    ap_const_lv64_A7 = 64'b10100111;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_60 = 7'b1100000;
parameter    ap_const_lv8_20 = 8'b100000;
parameter    ap_const_lv8_3F = 8'b111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv7_70 = 7'b1110000;
parameter    ap_const_lv8_10 = 8'b10000;
parameter    ap_const_lv8_1F = 8'b11111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv7_78 = 7'b1111000;
parameter    ap_const_lv8_8 = 8'b1000;
parameter    ap_const_lv8_F = 8'b1111;
parameter    ap_const_lv7_7C = 7'b1111100;
parameter    ap_const_lv8_4 = 8'b100;
parameter    ap_const_lv8_7 = 8'b111;
parameter    ap_const_lv31_368C = 31'b11011010001100;
parameter    ap_const_lv31_2156 = 31'b10000101010110;
parameter    ap_const_lv31_234C = 31'b10001101001100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] LAR_address0;
output   LAR_ce0;
output   LAR_we0;
output  [15:0] LAR_d0;
input  [15:0] LAR_q0;
output  [7:0] LAR_address1;
output   LAR_ce1;
output   LAR_we1;
output  [15:0] LAR_d1;
input  [15:0] LAR_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] LAR_address0;
reg LAR_ce0;
reg LAR_we0;
reg[15:0] LAR_d0;
reg[7:0] LAR_address1;
reg LAR_ce1;
reg LAR_we1;
reg[15:0] LAR_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [6:0] reg_251;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state5;
reg   [6:0] reg_255;
wire   [7:0] LAR_addr_reg_972;
wire   [7:0] LAR_addr_1_reg_977;
wire   [0:0] icmp_fu_310_p2;
reg   [0:0] icmp_reg_982;
wire   [0:0] icmp6_fu_367_p2;
reg   [0:0] icmp6_reg_988;
wire   [7:0] LAR_addr_2_reg_994;
wire   [7:0] LAR_addr_3_reg_999;
reg   [6:0] tmp_8_reg_1004;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] icmp7_fu_424_p2;
reg   [0:0] icmp7_reg_1010;
reg   [6:0] tmp_10_reg_1016;
wire   [0:0] icmp8_fu_481_p2;
reg   [0:0] icmp8_reg_1022;
wire   [7:0] LAR_addr_4_reg_1028;
wire   [7:0] LAR_addr_5_reg_1033;
reg   [6:0] tmp_12_reg_1038;
wire   [0:0] ap_CS_fsm_state4;
reg   [3:0] tmp_46_reg_1044;
reg   [6:0] tmp_14_reg_1049;
wire   [0:0] icmp10_fu_562_p2;
reg   [0:0] icmp10_reg_1055;
wire   [7:0] LAR_addr_6_reg_1061;
wire   [7:0] LAR_addr_7_reg_1066;
wire   [0:0] icmp9_fu_650_p2;
reg   [0:0] icmp9_reg_1071;
reg   [4:0] tmp_55_reg_1077;
reg   [4:0] tmp_60_reg_1082;
wire   [0:0] icmp11_fu_781_p2;
reg   [0:0] icmp11_reg_1087;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] icmp12_fu_786_p2;
reg   [0:0] icmp12_reg_1093;
reg   [15:0] grp_gsm_add_fu_195_a;
reg   [12:0] grp_gsm_add_fu_195_b;
wire   [15:0] grp_gsm_add_fu_195_ap_return;
wire   [15:0] grp_gsm_add_fu_202_ap_return;
reg   [15:0] grp_gsm_add_fu_210_a;
reg   [12:0] grp_gsm_add_fu_210_b;
wire   [15:0] grp_gsm_add_fu_210_ap_return;
wire   [15:0] grp_gsm_add_fu_217_ap_return;
wire  signed [15:0] tmp_59_cast_fu_604_p1;
wire  signed [15:0] tmp_64_cast_fu_645_p1;
wire  signed [15:0] tmp_69_cast_fu_737_p1;
wire  signed [15:0] tmp_74_cast_fu_776_p1;
wire   [0:0] ap_CS_fsm_state7;
wire  signed [15:0] tmp_79_cast_fu_825_p1;
wire  signed [15:0] tmp_84_cast_fu_864_p1;
wire   [0:0] ap_CS_fsm_state8;
wire  signed [15:0] tmp_89_cast_fu_905_p1;
wire  signed [15:0] tmp_94_cast_fu_946_p1;
wire   [29:0] tmp_fu_259_p3;
wire   [27:0] tmp_15_fu_271_p3;
wire  signed [30:0] p_shl1_fu_267_p1;
wire  signed [30:0] p_shl2_fu_279_p1;
wire   [30:0] tmp_29_i_fu_283_p2;
wire   [1:0] tmp_36_fu_300_p4;
wire   [29:0] tmp_17_fu_316_p3;
wire   [27:0] tmp_19_fu_328_p3;
wire  signed [30:0] p_shl3_fu_324_p1;
wire  signed [30:0] p_shl4_fu_336_p1;
wire   [30:0] tmp_29_i2_fu_340_p2;
wire   [1:0] tmp_39_fu_357_p4;
wire   [29:0] tmp_20_fu_373_p3;
wire   [27:0] tmp_21_fu_385_p3;
wire  signed [30:0] p_shl5_fu_381_p1;
wire  signed [30:0] p_shl6_fu_393_p1;
wire   [30:0] tmp_29_i6_fu_397_p2;
wire   [2:0] tmp_42_fu_414_p4;
wire   [29:0] tmp_22_fu_430_p3;
wire   [27:0] tmp_23_fu_442_p3;
wire  signed [30:0] p_shl7_fu_438_p1;
wire  signed [30:0] p_shl8_fu_450_p1;
wire   [30:0] tmp_29_i1_fu_454_p2;
wire   [2:0] tmp_45_fu_471_p4;
wire  signed [30:0] tmp_29_i3_fu_951_p2;
wire   [29:0] tmp_24_fu_511_p3;
wire   [25:0] tmp_49_fu_523_p3;
wire  signed [30:0] p_shl_fu_519_p1;
wire  signed [30:0] p_shl9_fu_531_p1;
wire   [30:0] tmp_29_i4_fu_535_p2;
wire   [3:0] tmp_50_fu_552_p4;
wire  signed [7:0] temp_44_cast_fu_568_p1;
wire   [0:0] tmp_s_fu_572_p2;
wire   [0:0] tmp_26_fu_591_p2;
wire   [7:0] tmp_27_cast_fu_584_p3;
wire   [7:0] tmp_25_fu_578_p2;
wire   [7:0] tmp_27_fu_596_p3;
wire  signed [7:0] temp_48_cast_fu_609_p1;
wire   [0:0] tmp_28_fu_613_p2;
wire   [0:0] tmp_30_fu_632_p2;
wire   [7:0] tmp_33_cast_fu_625_p3;
wire   [7:0] tmp_29_fu_619_p2;
wire   [7:0] tmp_31_fu_637_p3;
wire  signed [30:0] tmp_29_i5_fu_958_p2;
wire  signed [30:0] tmp_29_i7_fu_965_p2;
wire  signed [7:0] temp_52_cast_fu_703_p1;
wire   [0:0] tmp_32_fu_706_p2;
wire   [0:0] tmp_34_fu_724_p2;
wire   [7:0] tmp_39_cast_fu_717_p3;
wire   [7:0] tmp_33_fu_711_p2;
wire   [7:0] tmp_35_fu_729_p3;
wire  signed [7:0] temp_56_cast_fu_742_p1;
wire   [0:0] tmp_37_fu_745_p2;
wire   [0:0] tmp_40_fu_763_p2;
wire   [7:0] tmp_45_cast_fu_756_p3;
wire   [7:0] tmp_38_fu_750_p2;
wire   [7:0] tmp_41_fu_768_p3;
wire  signed [7:0] temp_60_cast_fu_791_p1;
wire   [0:0] tmp_43_fu_794_p2;
wire   [0:0] tmp_47_fu_812_p2;
wire   [7:0] tmp_51_cast_fu_805_p3;
wire   [7:0] tmp_44_fu_799_p2;
wire   [7:0] tmp_48_fu_817_p3;
wire  signed [7:0] temp_64_cast_fu_830_p1;
wire   [0:0] tmp_51_fu_833_p2;
wire   [0:0] tmp_53_fu_851_p2;
wire   [7:0] tmp_58_cast_fu_844_p3;
wire   [7:0] tmp_52_fu_838_p2;
wire   [7:0] tmp_54_fu_856_p3;
wire  signed [7:0] temp_68_cast_fu_869_p1;
wire   [0:0] tmp_56_fu_873_p2;
wire   [0:0] tmp_58_fu_892_p2;
wire   [7:0] tmp_64_cast1_fu_885_p3;
wire   [7:0] tmp_57_fu_879_p2;
wire   [7:0] tmp_59_fu_897_p3;
wire  signed [7:0] temp_72_cast_fu_910_p1;
wire   [0:0] tmp_61_fu_914_p2;
wire   [0:0] tmp_63_fu_933_p2;
wire   [7:0] tmp_70_cast_fu_926_p3;
wire   [7:0] tmp_62_fu_920_p2;
wire   [7:0] tmp_64_fu_938_p3;
wire   [14:0] tmp_29_i3_fu_951_p0;
wire   [14:0] tmp_29_i5_fu_958_p0;
wire   [14:0] tmp_29_i7_fu_965_p0;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
end

gsm_add grp_gsm_add_fu_195(
    .a(grp_gsm_add_fu_195_a),
    .b(grp_gsm_add_fu_195_b),
    .ap_return(grp_gsm_add_fu_195_ap_return)
);

gsm_add grp_gsm_add_fu_202(
    .a(grp_gsm_add_fu_195_ap_return),
    .b(ap_const_lv13_100),
    .ap_return(grp_gsm_add_fu_202_ap_return)
);

gsm_add grp_gsm_add_fu_210(
    .a(grp_gsm_add_fu_210_a),
    .b(grp_gsm_add_fu_210_b),
    .ap_return(grp_gsm_add_fu_210_ap_return)
);

gsm_add grp_gsm_add_fu_217(
    .a(grp_gsm_add_fu_210_ap_return),
    .b(ap_const_lv13_100),
    .ap_return(grp_gsm_add_fu_217_ap_return)
);

Gsm_LPC_Analysis_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
Gsm_LPC_Analysis_lbW_U1365(
    .din0(tmp_29_i3_fu_951_p0),
    .din1(LAR_q0),
    .dout(tmp_29_i3_fu_951_p2)
);

Gsm_LPC_Analysis_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
Gsm_LPC_Analysis_lbW_U1366(
    .din0(tmp_29_i5_fu_958_p0),
    .din1(LAR_q0),
    .dout(tmp_29_i5_fu_958_p2)
);

Gsm_LPC_Analysis_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
Gsm_LPC_Analysis_lbW_U1367(
    .din0(tmp_29_i7_fu_965_p0),
    .din1(LAR_q1),
    .dout(tmp_29_i7_fu_965_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp10_reg_1055 <= icmp10_fu_562_p2;
        tmp_12_reg_1038 <= {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
        tmp_14_reg_1049 <= {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
        tmp_46_reg_1044 <= {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_C]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp11_reg_1087 <= icmp11_fu_781_p2;
        icmp12_reg_1093 <= icmp12_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp6_reg_988 <= icmp6_fu_367_p2;
        icmp_reg_982 <= icmp_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp7_reg_1010 <= icmp7_fu_424_p2;
        icmp8_reg_1022 <= icmp8_fu_481_p2;
        tmp_10_reg_1016 <= {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
        tmp_8_reg_1004 <= {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp9_reg_1071 <= icmp9_fu_650_p2;
        tmp_55_reg_1077 <= {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_B]}};
        tmp_60_reg_1082 <= {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_B]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_251 <= {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
        reg_255 <= {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_9]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LAR_address0 = LAR_addr_6_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LAR_address0 = LAR_addr_4_reg_1028;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LAR_address0 = LAR_addr_2_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LAR_address0 = LAR_addr_reg_972;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LAR_address0 = ap_const_lv64_A6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LAR_address0 = ap_const_lv64_A4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        LAR_address0 = ap_const_lv64_A2;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        LAR_address0 = ap_const_lv64_A0;
    end else begin
        LAR_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LAR_address1 = LAR_addr_7_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LAR_address1 = LAR_addr_5_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LAR_address1 = LAR_addr_3_reg_999;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LAR_address1 = LAR_addr_1_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LAR_address1 = ap_const_lv64_A7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LAR_address1 = ap_const_lv64_A5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        LAR_address1 = ap_const_lv64_A3;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        LAR_address1 = ap_const_lv64_A1;
    end else begin
        LAR_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        LAR_ce0 = 1'b1;
    end else begin
        LAR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        LAR_ce1 = 1'b1;
    end else begin
        LAR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LAR_d0 = tmp_89_cast_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LAR_d0 = tmp_79_cast_fu_825_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LAR_d0 = tmp_69_cast_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LAR_d0 = tmp_59_cast_fu_604_p1;
    end else begin
        LAR_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LAR_d1 = tmp_94_cast_fu_946_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LAR_d1 = tmp_84_cast_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LAR_d1 = tmp_74_cast_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LAR_d1 = tmp_64_cast_fu_645_p1;
    end else begin
        LAR_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        LAR_we0 = 1'b1;
    end else begin
        LAR_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        LAR_we1 = 1'b1;
    end else begin
        LAR_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_195_a = {{tmp_29_i5_fu_958_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_195_a = {{tmp_29_i3_fu_951_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_195_a = {{tmp_29_i6_fu_397_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_gsm_add_fu_195_a = {{tmp_29_i_fu_283_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else begin
        grp_gsm_add_fu_195_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_195_b = ap_const_lv13_1EAB;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_195_b = ap_const_lv13_5E;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_195_b = ap_const_lv13_800;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_gsm_add_fu_195_b = ap_const_lv13_0;
    end else begin
        grp_gsm_add_fu_195_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_210_a = {{tmp_29_i7_fu_965_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_210_a = {{tmp_29_i4_fu_535_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_210_a = {{tmp_29_i1_fu_454_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_gsm_add_fu_210_a = {{tmp_29_i2_fu_340_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
    end else begin
        grp_gsm_add_fu_210_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_210_b = ap_const_lv13_1B88;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_210_b = ap_const_lv13_1900;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_210_b = ap_const_lv13_1600;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_gsm_add_fu_210_b = ap_const_lv13_0;
    end else begin
        grp_gsm_add_fu_210_b = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LAR_addr_1_reg_977 = ap_const_lv64_A1;

assign LAR_addr_2_reg_994 = ap_const_lv64_A2;

assign LAR_addr_3_reg_999 = ap_const_lv64_A3;

assign LAR_addr_4_reg_1028 = ap_const_lv64_A4;

assign LAR_addr_5_reg_1033 = ap_const_lv64_A5;

assign LAR_addr_6_reg_1061 = ap_const_lv64_A6;

assign LAR_addr_7_reg_1066 = ap_const_lv64_A7;

assign LAR_addr_reg_972 = ap_const_lv64_A0;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign icmp10_fu_562_p2 = (($signed(tmp_50_fu_552_p4) > $signed(4'b0000)) ? 1'b1 : 1'b0);

assign icmp11_fu_781_p2 = (($signed(tmp_55_reg_1077) > $signed(5'b00000)) ? 1'b1 : 1'b0);

assign icmp12_fu_786_p2 = (($signed(tmp_60_reg_1082) > $signed(5'b00000)) ? 1'b1 : 1'b0);

assign icmp6_fu_367_p2 = ((tmp_39_fu_357_p4 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign icmp7_fu_424_p2 = (($signed(tmp_42_fu_414_p4) > $signed(3'b000)) ? 1'b1 : 1'b0);

assign icmp8_fu_481_p2 = (($signed(tmp_45_fu_471_p4) > $signed(3'b000)) ? 1'b1 : 1'b0);

assign icmp9_fu_650_p2 = (($signed(tmp_46_reg_1044) > $signed(4'b0000)) ? 1'b1 : 1'b0);

assign icmp_fu_310_p2 = ((tmp_36_fu_300_p4 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign p_shl1_fu_267_p1 = $signed(tmp_fu_259_p3);

assign p_shl2_fu_279_p1 = $signed(tmp_15_fu_271_p3);

assign p_shl3_fu_324_p1 = $signed(tmp_17_fu_316_p3);

assign p_shl4_fu_336_p1 = $signed(tmp_19_fu_328_p3);

assign p_shl5_fu_381_p1 = $signed(tmp_20_fu_373_p3);

assign p_shl6_fu_393_p1 = $signed(tmp_21_fu_385_p3);

assign p_shl7_fu_438_p1 = $signed(tmp_22_fu_430_p3);

assign p_shl8_fu_450_p1 = $signed(tmp_23_fu_442_p3);

assign p_shl9_fu_531_p1 = $signed(tmp_49_fu_523_p3);

assign p_shl_fu_519_p1 = $signed(tmp_24_fu_511_p3);

assign temp_44_cast_fu_568_p1 = $signed(reg_251);

assign temp_48_cast_fu_609_p1 = $signed(reg_255);

assign temp_52_cast_fu_703_p1 = $signed(tmp_8_reg_1004);

assign temp_56_cast_fu_742_p1 = $signed(tmp_10_reg_1016);

assign temp_60_cast_fu_791_p1 = $signed(tmp_12_reg_1038);

assign temp_64_cast_fu_830_p1 = $signed(tmp_14_reg_1049);

assign temp_68_cast_fu_869_p1 = $signed(reg_251);

assign temp_72_cast_fu_910_p1 = $signed(reg_255);

assign tmp_15_fu_271_p3 = {{LAR_q0}, {ap_const_lv12_0}};

assign tmp_17_fu_316_p3 = {{LAR_q1}, {ap_const_lv14_0}};

assign tmp_19_fu_328_p3 = {{LAR_q1}, {ap_const_lv12_0}};

assign tmp_20_fu_373_p3 = {{LAR_q0}, {ap_const_lv14_0}};

assign tmp_21_fu_385_p3 = {{LAR_q0}, {ap_const_lv12_0}};

assign tmp_22_fu_430_p3 = {{LAR_q1}, {ap_const_lv14_0}};

assign tmp_23_fu_442_p3 = {{LAR_q1}, {ap_const_lv12_0}};

assign tmp_24_fu_511_p3 = {{LAR_q1}, {ap_const_lv14_0}};

assign tmp_25_fu_578_p2 = ($signed(ap_const_lv8_20) + $signed(temp_44_cast_fu_568_p1));

assign tmp_26_fu_591_p2 = (icmp_reg_982 | tmp_s_fu_572_p2);

assign tmp_27_cast_fu_584_p3 = ((icmp_reg_982[0:0] === 1'b1) ? ap_const_lv8_3F : ap_const_lv8_0);

assign tmp_27_fu_596_p3 = ((tmp_26_fu_591_p2[0:0] === 1'b1) ? tmp_27_cast_fu_584_p3 : tmp_25_fu_578_p2);

assign tmp_28_fu_613_p2 = (($signed(reg_255) < $signed(7'b1100000)) ? 1'b1 : 1'b0);

assign tmp_29_fu_619_p2 = ($signed(ap_const_lv8_20) + $signed(temp_48_cast_fu_609_p1));

assign tmp_29_i1_fu_454_p2 = ($signed(p_shl7_fu_438_p1) + $signed(p_shl8_fu_450_p1));

assign tmp_29_i2_fu_340_p2 = ($signed(p_shl3_fu_324_p1) + $signed(p_shl4_fu_336_p1));

assign tmp_29_i3_fu_951_p0 = ap_const_lv31_368C;

assign tmp_29_i4_fu_535_p2 = ($signed(p_shl_fu_519_p1) - $signed(p_shl9_fu_531_p1));

assign tmp_29_i5_fu_958_p0 = ap_const_lv31_2156;

assign tmp_29_i6_fu_397_p2 = ($signed(p_shl5_fu_381_p1) + $signed(p_shl6_fu_393_p1));

assign tmp_29_i7_fu_965_p0 = ap_const_lv31_234C;

assign tmp_29_i_fu_283_p2 = ($signed(p_shl1_fu_267_p1) + $signed(p_shl2_fu_279_p1));

assign tmp_30_fu_632_p2 = (icmp6_reg_988 | tmp_28_fu_613_p2);

assign tmp_31_fu_637_p3 = ((tmp_30_fu_632_p2[0:0] === 1'b1) ? tmp_33_cast_fu_625_p3 : tmp_29_fu_619_p2);

assign tmp_32_fu_706_p2 = (($signed(tmp_8_reg_1004) < $signed(7'b1110000)) ? 1'b1 : 1'b0);

assign tmp_33_cast_fu_625_p3 = ((icmp6_reg_988[0:0] === 1'b1) ? ap_const_lv8_3F : ap_const_lv8_0);

assign tmp_33_fu_711_p2 = ($signed(ap_const_lv8_10) + $signed(temp_52_cast_fu_703_p1));

assign tmp_34_fu_724_p2 = (icmp7_reg_1010 | tmp_32_fu_706_p2);

assign tmp_35_fu_729_p3 = ((tmp_34_fu_724_p2[0:0] === 1'b1) ? tmp_39_cast_fu_717_p3 : tmp_33_fu_711_p2);

assign tmp_36_fu_300_p4 = {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_E]}};

assign tmp_37_fu_745_p2 = (($signed(tmp_10_reg_1016) < $signed(7'b1110000)) ? 1'b1 : 1'b0);

assign tmp_38_fu_750_p2 = ($signed(ap_const_lv8_10) + $signed(temp_56_cast_fu_742_p1));

assign tmp_39_cast_fu_717_p3 = ((icmp7_reg_1010[0:0] === 1'b1) ? ap_const_lv8_1F : ap_const_lv8_0);

assign tmp_39_fu_357_p4 = {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_E]}};

assign tmp_40_fu_763_p2 = (icmp8_reg_1022 | tmp_37_fu_745_p2);

assign tmp_41_fu_768_p3 = ((tmp_40_fu_763_p2[0:0] === 1'b1) ? tmp_45_cast_fu_756_p3 : tmp_38_fu_750_p2);

assign tmp_42_fu_414_p4 = {{grp_gsm_add_fu_202_ap_return[ap_const_lv32_F : ap_const_lv32_D]}};

assign tmp_43_fu_794_p2 = (($signed(tmp_12_reg_1038) < $signed(7'b1111000)) ? 1'b1 : 1'b0);

assign tmp_44_fu_799_p2 = ($signed(ap_const_lv8_8) + $signed(temp_60_cast_fu_791_p1));

assign tmp_45_cast_fu_756_p3 = ((icmp8_reg_1022[0:0] === 1'b1) ? ap_const_lv8_1F : ap_const_lv8_0);

assign tmp_45_fu_471_p4 = {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_D]}};

assign tmp_47_fu_812_p2 = (icmp9_reg_1071 | tmp_43_fu_794_p2);

assign tmp_48_fu_817_p3 = ((tmp_47_fu_812_p2[0:0] === 1'b1) ? tmp_51_cast_fu_805_p3 : tmp_44_fu_799_p2);

assign tmp_49_fu_523_p3 = {{LAR_q1}, {ap_const_lv10_0}};

assign tmp_50_fu_552_p4 = {{grp_gsm_add_fu_217_ap_return[ap_const_lv32_F : ap_const_lv32_C]}};

assign tmp_51_cast_fu_805_p3 = ((icmp9_reg_1071[0:0] === 1'b1) ? ap_const_lv8_F : ap_const_lv8_0);

assign tmp_51_fu_833_p2 = (($signed(tmp_14_reg_1049) < $signed(7'b1111000)) ? 1'b1 : 1'b0);

assign tmp_52_fu_838_p2 = ($signed(ap_const_lv8_8) + $signed(temp_64_cast_fu_830_p1));

assign tmp_53_fu_851_p2 = (icmp10_reg_1055 | tmp_51_fu_833_p2);

assign tmp_54_fu_856_p3 = ((tmp_53_fu_851_p2[0:0] === 1'b1) ? tmp_58_cast_fu_844_p3 : tmp_52_fu_838_p2);

assign tmp_56_fu_873_p2 = (($signed(reg_251) < $signed(7'b1111100)) ? 1'b1 : 1'b0);

assign tmp_57_fu_879_p2 = ($signed(ap_const_lv8_4) + $signed(temp_68_cast_fu_869_p1));

assign tmp_58_cast_fu_844_p3 = ((icmp10_reg_1055[0:0] === 1'b1) ? ap_const_lv8_F : ap_const_lv8_0);

assign tmp_58_fu_892_p2 = (icmp11_reg_1087 | tmp_56_fu_873_p2);

assign tmp_59_cast_fu_604_p1 = $signed(tmp_27_fu_596_p3);

assign tmp_59_fu_897_p3 = ((tmp_58_fu_892_p2[0:0] === 1'b1) ? tmp_64_cast1_fu_885_p3 : tmp_57_fu_879_p2);

assign tmp_61_fu_914_p2 = (($signed(reg_255) < $signed(7'b1111100)) ? 1'b1 : 1'b0);

assign tmp_62_fu_920_p2 = ($signed(ap_const_lv8_4) + $signed(temp_72_cast_fu_910_p1));

assign tmp_63_fu_933_p2 = (icmp12_reg_1093 | tmp_61_fu_914_p2);

assign tmp_64_cast1_fu_885_p3 = ((icmp11_reg_1087[0:0] === 1'b1) ? ap_const_lv8_7 : ap_const_lv8_0);

assign tmp_64_cast_fu_645_p1 = $signed(tmp_31_fu_637_p3);

assign tmp_64_fu_938_p3 = ((tmp_63_fu_933_p2[0:0] === 1'b1) ? tmp_70_cast_fu_926_p3 : tmp_62_fu_920_p2);

assign tmp_69_cast_fu_737_p1 = $signed(tmp_35_fu_729_p3);

assign tmp_70_cast_fu_926_p3 = ((icmp12_reg_1093[0:0] === 1'b1) ? ap_const_lv8_7 : ap_const_lv8_0);

assign tmp_74_cast_fu_776_p1 = $signed(tmp_41_fu_768_p3);

assign tmp_79_cast_fu_825_p1 = $signed(tmp_48_fu_817_p3);

assign tmp_84_cast_fu_864_p1 = $signed(tmp_54_fu_856_p3);

assign tmp_89_cast_fu_905_p1 = $signed(tmp_59_fu_897_p3);

assign tmp_94_cast_fu_946_p1 = $signed(tmp_64_fu_938_p3);

assign tmp_fu_259_p3 = {{LAR_q0}, {ap_const_lv14_0}};

assign tmp_s_fu_572_p2 = (($signed(reg_251) < $signed(7'b1100000)) ? 1'b1 : 1'b0);

endmodule //Quantization_and_cod
