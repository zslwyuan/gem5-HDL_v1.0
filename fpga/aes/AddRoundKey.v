// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        type_r,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 6'b1;
parameter    ap_ST_fsm_state2 = 6'b10;
parameter    ap_ST_fsm_state3 = 6'b100;
parameter    ap_ST_fsm_state4 = 6'b1000;
parameter    ap_ST_fsm_state5 = 6'b10000;
parameter    ap_ST_fsm_state6 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1F4C0 = 32'b11111010011000000;
parameter    ap_const_lv32_2EEC0 = 32'b101110111011000000;
parameter    ap_const_lv32_3E8C0 = 32'b111110100011000000;
parameter    ap_const_lv32_1F480 = 32'b11111010010000000;
parameter    ap_const_lv32_2EE80 = 32'b101110111010000000;
parameter    ap_const_lv32_3E880 = 32'b111110100010000000;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv10_78 = 10'b1111000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv10_F0 = 10'b11110000;
parameter    ap_const_lv10_168 = 10'b101101000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_3 = 5'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [6:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [31:0] type_r;
input  [31:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[6:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] reg_169;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] reg_174;
wire   [0:0] sel_tmp6_fu_179_p2;
reg   [0:0] sel_tmp6_reg_374;
wire   [0:0] sel_tmp7_fu_185_p2;
reg   [0:0] sel_tmp7_reg_379;
wire   [0:0] sel_tmp8_fu_191_p2;
reg   [0:0] sel_tmp8_reg_384;
wire   [0:0] sel_tmp9_fu_221_p2;
reg   [0:0] sel_tmp9_reg_389;
wire   [3:0] nb_1_fu_248_p3;
reg   [3:0] nb_1_reg_395;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] tmp_fu_260_p2;
reg   [31:0] tmp_reg_400;
wire   [3:0] j_6_fu_275_p2;
reg   [3:0] j_6_reg_408;
wire   [0:0] ap_CS_fsm_state3;
wire   [9:0] tmp_129_fu_291_p1;
reg   [9:0] tmp_129_reg_413;
wire   [0:0] exitcond_fu_270_p2;
wire   [4:0] tmp_62_fu_310_p3;
reg   [4:0] tmp_62_reg_429;
reg   [6:0] statemt_addr_reg_435;
reg   [6:0] statemt_addr_77_reg_440;
reg   [6:0] statemt_addr_78_reg_455;
reg   [6:0] statemt_addr_79_reg_460;
reg   [3:0] j_reg_146;
wire   [0:0] ap_CS_fsm_state6;
wire  signed [63:0] tmp_61_fu_286_p1;
wire  signed [63:0] tmp_190_cast_fu_301_p1;
wire   [63:0] tmp_63_fu_318_p1;
wire   [63:0] tmp_66_fu_329_p1;
wire  signed [63:0] tmp_191_cast_fu_339_p1;
wire  signed [63:0] tmp_192_cast_fu_349_p1;
wire   [63:0] tmp_69_fu_359_p1;
wire   [63:0] tmp_72_fu_369_p1;
wire   [0:0] sel_tmp4_fu_203_p2;
wire   [0:0] sel_tmp5_fu_209_p2;
wire   [0:0] tmp16_fu_215_p2;
wire   [0:0] sel_tmp3_fu_197_p2;
wire   [0:0] tmp15_fu_227_p2;
wire   [0:0] sel_tmp_fu_231_p2;
wire   [0:0] tmp_17_fu_243_p2;
wire   [3:0] sel_tmp1_cast_fu_236_p3;
wire  signed [31:0] tmp_fu_260_p0;
wire   [3:0] tmp_fu_260_p1;
wire   [31:0] j_cast1_fu_266_p1;
wire   [31:0] tmp_s_fu_281_p2;
wire   [9:0] tmp_189_fu_295_p2;
wire   [2:0] tmp_130_fu_306_p1;
wire   [4:0] tmp_65_fu_323_p2;
wire   [9:0] tmp_190_fu_334_p2;
wire   [9:0] tmp_191_fu_344_p2;
wire   [4:0] tmp_68_fu_354_p2;
wire   [4:0] tmp_71_fu_364_p2;
reg   [5:0] ap_NS_fsm;
wire   [31:0] tmp_fu_260_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_146 <= j_6_reg_408;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_146 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_6_reg_408 <= j_6_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        nb_1_reg_395[3 : 1] <= nb_1_fu_248_p3[3 : 1];
        tmp_reg_400[31 : 1] <= tmp_fu_260_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_169 <= grp_fu_157_p2;
        reg_174 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sel_tmp6_reg_374 <= sel_tmp6_fu_179_p2;
        sel_tmp7_reg_379 <= sel_tmp7_fu_185_p2;
        sel_tmp8_reg_384 <= sel_tmp8_fu_191_p2;
        sel_tmp9_reg_389 <= sel_tmp9_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_270_p2 == 1'b0))) begin
        statemt_addr_77_reg_440[4 : 2] <= tmp_66_fu_329_p1[4 : 2];
        statemt_addr_reg_435[4 : 2] <= tmp_63_fu_318_p1[4 : 2];
        tmp_129_reg_413 <= tmp_129_fu_291_p1;
        tmp_62_reg_429[4 : 2] <= tmp_62_fu_310_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_addr_78_reg_455[4 : 2] <= tmp_69_fu_359_p1[4 : 2];
        statemt_addr_79_reg_460[4 : 2] <= tmp_72_fu_369_p1[4 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & ~(exitcond_fu_270_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(exitcond_fu_270_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address0 = statemt_addr_78_reg_455;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = statemt_addr_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = tmp_69_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = tmp_63_fu_318_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address1 = statemt_addr_79_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = statemt_addr_77_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = tmp_72_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = tmp_66_fu_329_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address0 = tmp_191_cast_fu_339_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = tmp_61_fu_286_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address1 = tmp_192_cast_fu_349_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = tmp_190_cast_fu_301_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~(exitcond_fu_270_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign exitcond_fu_270_p2 = ((j_reg_146 == nb_1_reg_395) ? 1'b1 : 1'b0);

assign grp_fu_157_p2 = (statemt_q0 ^ word_q0);

assign grp_fu_163_p2 = (statemt_q1 ^ word_q1);

assign j_6_fu_275_p2 = (j_reg_146 + ap_const_lv4_1);

assign j_cast1_fu_266_p1 = j_reg_146;

assign nb_1_fu_248_p3 = ((tmp_17_fu_243_p2[0:0] === 1'b1) ? sel_tmp1_cast_fu_236_p3 : ap_const_lv4_8);

assign sel_tmp1_cast_fu_236_p3 = ((sel_tmp9_reg_389[0:0] === 1'b1) ? ap_const_lv4_4 : ap_const_lv4_6);

assign sel_tmp3_fu_197_p2 = ((type_r == ap_const_lv32_1F480) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_203_p2 = ((type_r == ap_const_lv32_2EE80) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_209_p2 = ((type_r == ap_const_lv32_3E880) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_179_p2 = ((type_r == ap_const_lv32_1F4C0) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_185_p2 = ((type_r == ap_const_lv32_2EEC0) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_191_p2 = ((type_r == ap_const_lv32_3E8C0) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_221_p2 = (tmp16_fu_215_p2 | sel_tmp3_fu_197_p2);

assign sel_tmp_fu_231_p2 = (tmp15_fu_227_p2 | sel_tmp6_reg_374);

assign statemt_d0 = reg_169;

assign statemt_d1 = reg_174;

assign tmp15_fu_227_p2 = (sel_tmp7_reg_379 | sel_tmp8_reg_384);

assign tmp16_fu_215_p2 = (sel_tmp4_fu_203_p2 | sel_tmp5_fu_209_p2);

assign tmp_129_fu_291_p1 = tmp_s_fu_281_p2[9:0];

assign tmp_130_fu_306_p1 = j_reg_146[2:0];

assign tmp_17_fu_243_p2 = (sel_tmp9_reg_389 | sel_tmp_fu_231_p2);

assign tmp_189_fu_295_p2 = (ap_const_lv10_78 + tmp_129_fu_291_p1);

assign tmp_190_cast_fu_301_p1 = $signed(tmp_189_fu_295_p2);

assign tmp_190_fu_334_p2 = (ap_const_lv10_F0 + tmp_129_reg_413);

assign tmp_191_cast_fu_339_p1 = $signed(tmp_190_fu_334_p2);

assign tmp_191_fu_344_p2 = (ap_const_lv10_168 + tmp_129_reg_413);

assign tmp_192_cast_fu_349_p1 = $signed(tmp_191_fu_344_p2);

assign tmp_61_fu_286_p1 = $signed(tmp_s_fu_281_p2);

assign tmp_62_fu_310_p3 = {{tmp_130_fu_306_p1}, {ap_const_lv2_0}};

assign tmp_63_fu_318_p1 = tmp_62_fu_310_p3;

assign tmp_65_fu_323_p2 = (tmp_62_fu_310_p3 | ap_const_lv5_1);

assign tmp_66_fu_329_p1 = tmp_65_fu_323_p2;

assign tmp_68_fu_354_p2 = (tmp_62_reg_429 | ap_const_lv5_2);

assign tmp_69_fu_359_p1 = tmp_68_fu_354_p2;

assign tmp_71_fu_364_p2 = (tmp_62_reg_429 | ap_const_lv5_3);

assign tmp_72_fu_369_p1 = tmp_71_fu_364_p2;

assign tmp_fu_260_p0 = n;

assign tmp_fu_260_p1 = tmp_fu_260_p10;

assign tmp_fu_260_p10 = nb_1_fu_248_p3;

assign tmp_fu_260_p2 = ($signed(tmp_fu_260_p0) * $signed({{1'b0}, {tmp_fu_260_p1}}));

assign tmp_s_fu_281_p2 = (tmp_reg_400 + j_cast1_fu_266_p1);

always @ (posedge ap_clk) begin
    nb_1_reg_395[0] <= 1'b0;
    tmp_reg_400[0] <= 1'b0;
    tmp_62_reg_429[1:0] <= 2'b00;
    statemt_addr_reg_435[1:0] <= 2'b00;
    statemt_addr_reg_435[6:5] <= 2'b00;
    statemt_addr_77_reg_440[1:0] <= 2'b01;
    statemt_addr_77_reg_440[6:5] <= 2'b00;
    statemt_addr_78_reg_455[1:0] <= 2'b10;
    statemt_addr_78_reg_455[6:5] <= 2'b00;
    statemt_addr_79_reg_460[1:0] <= 2'b11;
    statemt_addr_79_reg_460[6:5] <= 2'b00;
end

endmodule //AddRoundKey
