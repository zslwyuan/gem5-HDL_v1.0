// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumn_AddRoundKe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        nb,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 11'b1;
parameter    ap_ST_fsm_state2 = 11'b10;
parameter    ap_ST_fsm_state3 = 11'b100;
parameter    ap_ST_fsm_state4 = 11'b1000;
parameter    ap_ST_fsm_state5 = 11'b10000;
parameter    ap_ST_fsm_state6 = 11'b100000;
parameter    ap_ST_fsm_state7 = 11'b1000000;
parameter    ap_ST_fsm_state8 = 11'b10000000;
parameter    ap_ST_fsm_state9 = 11'b100000000;
parameter    ap_ST_fsm_state10 = 11'b1000000000;
parameter    ap_ST_fsm_state11 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_78 = 10'b1111000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_100 = 32'b100000000;
parameter    ap_const_lv10_F0 = 10'b11110000;
parameter    ap_const_lv10_168 = 10'b101101000;
parameter    ap_const_lv32_11B = 32'b100011011;
parameter    ap_const_lv32_1F = 32'b11111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [6:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [31:0] nb;
input  [31:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[6:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] tmp_reg_871;
wire   [0:0] ap_CS_fsm_state3;
wire   [30:0] j_3_fu_300_p2;
reg   [30:0] j_3_reg_879;
wire   [0:0] ap_CS_fsm_state4;
wire   [31:0] tmp_2_fu_310_p3;
reg   [31:0] tmp_2_reg_884;
wire   [0:0] tmp_s_fu_295_p2;
wire  signed [63:0] tmp_3_fu_318_p1;
reg  signed [63:0] tmp_3_reg_890;
wire  signed [63:0] tmp_8_fu_329_p1;
reg  signed [63:0] tmp_8_reg_900;
wire   [9:0] tmp_45_fu_344_p1;
reg   [9:0] tmp_45_reg_910;
reg   [31:0] x_6_reg_926;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_5_fu_367_p2;
reg   [0:0] tmp_5_reg_934;
reg   [31:0] x_reg_939;
wire  signed [63:0] tmp_13_fu_378_p1;
reg  signed [63:0] tmp_13_reg_947;
wire  signed [63:0] tmp_23_fu_388_p1;
reg  signed [63:0] tmp_23_reg_957;
reg   [31:0] word_load_reg_977;
wire   [0:0] tmp_27_fu_421_p2;
reg   [0:0] tmp_27_reg_982;
reg   [31:0] word_load_1_reg_987;
wire   [31:0] tmp_32_fu_596_p2;
reg   [31:0] tmp_32_reg_992;
wire   [0:0] ap_CS_fsm_state6;
wire   [31:0] tmp_38_fu_696_p2;
reg   [31:0] tmp_38_reg_997;
wire   [31:0] tmp_43_fu_790_p2;
reg   [31:0] tmp_43_reg_1002;
wire   [30:0] j_2_fu_805_p2;
reg   [30:0] j_2_reg_1010;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] tmp_14_fu_815_p3;
reg   [31:0] tmp_14_reg_1015;
wire   [0:0] tmp_10_fu_800_p2;
wire  signed [63:0] tmp_15_fu_823_p1;
reg  signed [63:0] tmp_15_reg_1021;
wire  signed [63:0] tmp_17_fu_834_p1;
reg  signed [63:0] tmp_17_reg_1031;
wire  signed [63:0] tmp_19_fu_844_p1;
reg  signed [63:0] tmp_19_reg_1041;
wire   [0:0] ap_CS_fsm_state10;
wire  signed [63:0] tmp_21_fu_854_p1;
reg  signed [63:0] tmp_21_reg_1051;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
reg   [31:0] ret_d0;
wire   [31:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
reg    ret_we1;
reg   [31:0] ret_d1;
wire   [31:0] ret_q1;
reg   [30:0] j_reg_243;
wire   [0:0] ap_CS_fsm_state8;
reg   [30:0] j_1_reg_254;
wire   [0:0] ap_CS_fsm_state11;
wire  signed [63:0] tmp_25_fu_339_p1;
wire  signed [63:0] tmp_49_cast_fu_354_p1;
wire  signed [63:0] tmp_50_cast_fu_398_p1;
wire  signed [63:0] tmp_51_cast_fu_408_p1;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] tmp_26_fu_510_p2;
wire   [31:0] j_cast_fu_291_p1;
wire  signed [31:0] tmp_s_fu_295_p1;
wire   [29:0] tmp_4_fu_306_p1;
wire   [31:0] tmp_7_fu_323_p2;
wire   [31:0] tmp_24_fu_334_p2;
wire   [9:0] tmp_46_fu_348_p2;
wire   [23:0] grp_fu_265_p4;
wire   [31:0] p_mask_fu_359_p3;
wire   [31:0] tmp_12_fu_373_p2;
wire   [31:0] tmp_22_fu_383_p2;
wire   [9:0] tmp_47_fu_393_p2;
wire   [9:0] tmp_48_fu_403_p2;
wire   [23:0] grp_fu_275_p4;
wire   [31:0] p_mask2_fu_413_p3;
wire   [31:0] tmp_9_fu_427_p2;
wire   [31:0] tmp_6_fu_432_p2;
wire   [31:0] tmp_35_fu_445_p2;
wire   [31:0] x_1_fu_450_p2;
wire   [23:0] tmp_44_fu_455_p4;
wire   [31:0] p_mask1_fu_465_p3;
wire   [0:0] tmp_1_fu_473_p2;
wire   [31:0] tmp_11_fu_479_p2;
wire   [31:0] ret_load_1_fu_438_p3;
wire   [31:0] storemerge_v_fu_485_p3;
wire   [31:0] tmp3_fu_499_p2;
wire   [31:0] tmp2_fu_505_p2;
wire   [31:0] tmp1_fu_493_p2;
wire   [31:0] tmp_28_fu_517_p2;
wire   [31:0] tmp_50_fu_530_p2;
wire   [31:0] x_3_fu_536_p2;
wire   [23:0] tmp_51_fu_542_p4;
wire   [31:0] p_mask3_fu_552_p3;
wire   [0:0] tmp_30_fu_560_p2;
wire   [31:0] tmp_31_fu_566_p2;
wire   [31:0] storemerge8_v_fu_572_p3;
wire   [31:0] tmp_33_tmp_9_fu_523_p3;
wire   [31:0] tmp6_fu_585_p2;
wire   [31:0] tmp5_fu_591_p2;
wire   [31:0] tmp4_fu_580_p2;
wire   [31:0] p_mask4_fu_602_p3;
wire   [0:0] tmp_33_fu_610_p2;
wire   [31:0] tmp_34_fu_616_p2;
wire   [31:0] tmp_53_fu_630_p2;
wire   [31:0] x_5_fu_636_p2;
wire   [23:0] tmp_54_fu_642_p4;
wire   [31:0] p_mask5_fu_652_p3;
wire   [0:0] tmp_36_fu_660_p2;
wire   [31:0] tmp_37_fu_666_p2;
wire   [31:0] storemerge9_v_fu_672_p3;
wire   [31:0] tmp_43_tmp_s_fu_622_p3;
wire   [31:0] tmp9_fu_684_p2;
wire   [31:0] tmp8_fu_690_p2;
wire   [31:0] tmp7_fu_680_p2;
wire   [31:0] p_mask6_fu_702_p3;
wire   [0:0] tmp_39_fu_710_p2;
wire   [31:0] tmp_40_fu_716_p2;
wire   [31:0] x_7_fu_730_p2;
wire   [23:0] tmp_56_fu_735_p4;
wire   [31:0] p_mask7_fu_745_p3;
wire   [0:0] tmp_41_fu_753_p2;
wire   [31:0] tmp_42_fu_759_p2;
wire   [31:0] storemerge1_v_fu_765_p3;
wire   [31:0] tmp_53_tmp_s_fu_722_p3;
wire   [31:0] tmp12_fu_778_p2;
wire   [31:0] tmp11_fu_784_p2;
wire   [31:0] tmp10_fu_773_p2;
wire   [31:0] j_1_cast_fu_796_p1;
wire  signed [31:0] tmp_10_fu_800_p1;
wire   [29:0] tmp_57_fu_811_p1;
wire   [31:0] tmp_16_fu_828_p2;
wire   [31:0] tmp_18_fu_839_p2;
wire   [31:0] tmp_20_fu_849_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
end

MixColumn_AddRounfYi #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ret_address0),
    .ce0(ret_ce0),
    .we0(ret_we0),
    .d0(ret_d0),
    .q0(ret_q0),
    .address1(ret_address1),
    .ce1(ret_ce1),
    .we1(ret_we1),
    .d1(ret_d1),
    .q1(ret_q1)
);

encrypt1_mul_32s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
encrypt1_mul_32s_g8j_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(n),
    .din1(nb),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_s_fu_295_p2 == 1'b0))) begin
        j_1_reg_254 <= ap_const_lv31_0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_254 <= j_2_reg_1010;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_243 <= j_3_reg_879;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_243 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_1010 <= j_2_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_3_reg_879 <= j_3_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_13_reg_947[63 : 2] <= tmp_13_fu_378_p1[63 : 2];
        tmp_23_reg_957[63 : 2] <= tmp_23_fu_388_p1[63 : 2];
        tmp_27_reg_982 <= tmp_27_fu_421_p2;
        tmp_5_reg_934 <= tmp_5_fu_367_p2;
        word_load_1_reg_987 <= word_q1;
        word_load_reg_977 <= word_q0;
        x_6_reg_926 <= statemt_q0;
        x_reg_939 <= statemt_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_10_fu_800_p2))) begin
        tmp_14_reg_1015[31 : 2] <= tmp_14_fu_815_p3[31 : 2];
        tmp_15_reg_1021[63 : 2] <= tmp_15_fu_823_p1[63 : 2];
        tmp_17_reg_1031[63 : 2] <= tmp_17_fu_834_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_19_reg_1041[63 : 2] <= tmp_19_fu_844_p1[63 : 2];
        tmp_21_reg_1051[63 : 2] <= tmp_21_fu_854_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_s_fu_295_p2 == 1'b0))) begin
        tmp_2_reg_884[31 : 2] <= tmp_2_fu_310_p3[31 : 2];
        tmp_3_reg_890[63 : 2] <= tmp_3_fu_318_p1[63 : 2];
        tmp_45_reg_910 <= tmp_45_fu_344_p1;
        tmp_8_reg_900[63 : 2] <= tmp_8_fu_329_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_32_reg_992 <= tmp_32_fu_596_p2;
        tmp_38_reg_997 <= tmp_38_fu_696_p2;
        tmp_43_reg_1002 <= tmp_43_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_871 <= grp_fu_285_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_10_fu_800_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_10_fu_800_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_address0 = tmp_19_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_address0 = tmp_15_fu_823_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address0 = tmp_8_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_address0 = tmp_3_reg_890;
    end else begin
        ret_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_address1 = tmp_21_fu_854_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_address1 = tmp_17_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ret_address1 = tmp_23_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address1 = tmp_13_reg_947;
    end else begin
        ret_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        ret_ce1 = 1'b1;
    end else begin
        ret_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_d0 = tmp_32_reg_992;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_d0 = tmp_26_fu_510_p2;
    end else begin
        ret_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ret_d1 = tmp_43_reg_1002;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_d1 = tmp_38_reg_997;
    end else begin
        ret_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        ret_we1 = 1'b1;
    end else begin
        ret_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address0 = tmp_19_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address0 = tmp_15_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = tmp_13_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = tmp_3_fu_318_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address1 = tmp_21_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address1 = tmp_17_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = tmp_23_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = tmp_8_fu_329_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        word_address0 = tmp_50_cast_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address0 = tmp_25_fu_339_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        word_address1 = tmp_51_cast_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address1 = tmp_49_cast_fu_354_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((tmp_s_fu_295_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            if ((1'b0 == tmp_10_fu_800_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign grp_fu_265_p4 = {{statemt_q0[ap_const_lv32_1E : ap_const_lv32_7]}};

assign grp_fu_275_p4 = {{statemt_q1[ap_const_lv32_1E : ap_const_lv32_7]}};

assign j_1_cast_fu_796_p1 = j_1_reg_254;

assign j_2_fu_805_p2 = (j_1_reg_254 + ap_const_lv31_1);

assign j_3_fu_300_p2 = (j_reg_243 + ap_const_lv31_1);

assign j_cast_fu_291_p1 = j_reg_243;

assign p_mask1_fu_465_p3 = {{tmp_44_fu_455_p4}, {ap_const_lv8_0}};

assign p_mask2_fu_413_p3 = {{grp_fu_275_p4}, {ap_const_lv8_0}};

assign p_mask3_fu_552_p3 = {{tmp_51_fu_542_p4}, {ap_const_lv8_0}};

assign p_mask4_fu_602_p3 = {{grp_fu_265_p4}, {ap_const_lv8_0}};

assign p_mask5_fu_652_p3 = {{tmp_54_fu_642_p4}, {ap_const_lv8_0}};

assign p_mask6_fu_702_p3 = {{grp_fu_275_p4}, {ap_const_lv8_0}};

assign p_mask7_fu_745_p3 = {{tmp_56_fu_735_p4}, {ap_const_lv8_0}};

assign p_mask_fu_359_p3 = {{grp_fu_265_p4}, {ap_const_lv8_0}};

assign ret_load_1_fu_438_p3 = ((tmp_5_reg_934[0:0] === 1'b1) ? tmp_6_fu_432_p2 : tmp_9_fu_427_p2);

assign statemt_d0 = ret_q0;

assign statemt_d1 = ret_q1;

assign storemerge1_v_fu_765_p3 = ((tmp_41_fu_753_p2[0:0] === 1'b1) ? tmp_42_fu_759_p2 : x_7_fu_730_p2);

assign storemerge8_v_fu_572_p3 = ((tmp_30_fu_560_p2[0:0] === 1'b1) ? tmp_31_fu_566_p2 : x_3_fu_536_p2);

assign storemerge9_v_fu_672_p3 = ((tmp_36_fu_660_p2[0:0] === 1'b1) ? tmp_37_fu_666_p2 : x_5_fu_636_p2);

assign storemerge_v_fu_485_p3 = ((tmp_1_fu_473_p2[0:0] === 1'b1) ? tmp_11_fu_479_p2 : x_1_fu_450_p2);

assign tmp10_fu_773_p2 = (statemt_q0 ^ x_reg_939);

assign tmp11_fu_784_p2 = (tmp12_fu_778_p2 ^ word_q1);

assign tmp12_fu_778_p2 = (storemerge1_v_fu_765_p3 ^ tmp_53_tmp_s_fu_722_p3);

assign tmp1_fu_493_p2 = (statemt_q0 ^ statemt_q1);

assign tmp2_fu_505_p2 = (tmp3_fu_499_p2 ^ word_load_reg_977);

assign tmp3_fu_499_p2 = (ret_load_1_fu_438_p3 ^ storemerge_v_fu_485_p3);

assign tmp4_fu_580_p2 = (statemt_q1 ^ x_6_reg_926);

assign tmp5_fu_591_p2 = (tmp6_fu_585_p2 ^ word_load_1_reg_987);

assign tmp6_fu_585_p2 = (storemerge8_v_fu_572_p3 ^ tmp_33_tmp_9_fu_523_p3);

assign tmp7_fu_680_p2 = (x_reg_939 ^ x_6_reg_926);

assign tmp8_fu_690_p2 = (tmp9_fu_684_p2 ^ word_q0);

assign tmp9_fu_684_p2 = (storemerge9_v_fu_672_p3 ^ tmp_43_tmp_s_fu_622_p3);

assign tmp_10_fu_800_p1 = nb;

assign tmp_10_fu_800_p2 = (($signed(j_1_cast_fu_796_p1) < $signed(tmp_10_fu_800_p1)) ? 1'b1 : 1'b0);

assign tmp_11_fu_479_p2 = (x_1_fu_450_p2 ^ ap_const_lv32_11B);

assign tmp_12_fu_373_p2 = (tmp_2_reg_884 | ap_const_lv32_2);

assign tmp_13_fu_378_p1 = $signed(tmp_12_fu_373_p2);

assign tmp_14_fu_815_p3 = {{tmp_57_fu_811_p1}, {ap_const_lv2_0}};

assign tmp_15_fu_823_p1 = $signed(tmp_14_fu_815_p3);

assign tmp_16_fu_828_p2 = (tmp_14_fu_815_p3 | ap_const_lv32_1);

assign tmp_17_fu_834_p1 = $signed(tmp_16_fu_828_p2);

assign tmp_18_fu_839_p2 = (tmp_14_reg_1015 | ap_const_lv32_2);

assign tmp_19_fu_844_p1 = $signed(tmp_18_fu_839_p2);

assign tmp_1_fu_473_p2 = ((p_mask1_fu_465_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_20_fu_849_p2 = (tmp_14_reg_1015 | ap_const_lv32_3);

assign tmp_21_fu_854_p1 = $signed(tmp_20_fu_849_p2);

assign tmp_22_fu_383_p2 = (tmp_2_reg_884 | ap_const_lv32_3);

assign tmp_23_fu_388_p1 = $signed(tmp_22_fu_383_p2);

assign tmp_24_fu_334_p2 = (j_cast_fu_291_p1 + tmp_reg_871);

assign tmp_25_fu_339_p1 = $signed(tmp_24_fu_334_p2);

assign tmp_26_fu_510_p2 = (tmp2_fu_505_p2 ^ tmp1_fu_493_p2);

assign tmp_27_fu_421_p2 = ((p_mask2_fu_413_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_28_fu_517_p2 = (tmp_35_fu_445_p2 ^ ap_const_lv32_11B);

assign tmp_2_fu_310_p3 = {{tmp_4_fu_306_p1}, {ap_const_lv2_0}};

assign tmp_30_fu_560_p2 = ((p_mask3_fu_552_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_31_fu_566_p2 = (x_3_fu_536_p2 ^ ap_const_lv32_11B);

assign tmp_32_fu_596_p2 = (tmp5_fu_591_p2 ^ tmp4_fu_580_p2);

assign tmp_33_fu_610_p2 = ((p_mask4_fu_602_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_33_tmp_9_fu_523_p3 = ((tmp_27_reg_982[0:0] === 1'b1) ? tmp_28_fu_517_p2 : tmp_35_fu_445_p2);

assign tmp_34_fu_616_p2 = (tmp_50_fu_530_p2 ^ ap_const_lv32_11B);

assign tmp_35_fu_445_p2 = x_reg_939 << ap_const_lv32_1;

assign tmp_36_fu_660_p2 = ((p_mask5_fu_652_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_37_fu_666_p2 = (x_5_fu_636_p2 ^ ap_const_lv32_11B);

assign tmp_38_fu_696_p2 = (tmp8_fu_690_p2 ^ tmp7_fu_680_p2);

assign tmp_39_fu_710_p2 = ((p_mask6_fu_702_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_3_fu_318_p1 = $signed(tmp_2_fu_310_p3);

assign tmp_40_fu_716_p2 = (tmp_53_fu_630_p2 ^ ap_const_lv32_11B);

assign tmp_41_fu_753_p2 = ((p_mask7_fu_745_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_42_fu_759_p2 = (x_7_fu_730_p2 ^ ap_const_lv32_11B);

assign tmp_43_fu_790_p2 = (tmp11_fu_784_p2 ^ tmp10_fu_773_p2);

assign tmp_43_tmp_s_fu_622_p3 = ((tmp_33_fu_610_p2[0:0] === 1'b1) ? tmp_34_fu_616_p2 : tmp_50_fu_530_p2);

assign tmp_44_fu_455_p4 = {{x_1_fu_450_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_45_fu_344_p1 = tmp_24_fu_334_p2[9:0];

assign tmp_46_fu_348_p2 = (ap_const_lv10_78 + tmp_45_fu_344_p1);

assign tmp_47_fu_393_p2 = (ap_const_lv10_F0 + tmp_45_reg_910);

assign tmp_48_fu_403_p2 = (ap_const_lv10_168 + tmp_45_reg_910);

assign tmp_49_cast_fu_354_p1 = $signed(tmp_46_fu_348_p2);

assign tmp_4_fu_306_p1 = j_reg_243[29:0];

assign tmp_50_cast_fu_398_p1 = $signed(tmp_47_fu_393_p2);

assign tmp_50_fu_530_p2 = statemt_q0 << ap_const_lv32_1;

assign tmp_51_cast_fu_408_p1 = $signed(tmp_48_fu_403_p2);

assign tmp_51_fu_542_p4 = {{x_3_fu_536_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_53_fu_630_p2 = statemt_q1 << ap_const_lv32_1;

assign tmp_53_tmp_s_fu_722_p3 = ((tmp_39_fu_710_p2[0:0] === 1'b1) ? tmp_40_fu_716_p2 : tmp_53_fu_630_p2);

assign tmp_54_fu_642_p4 = {{x_5_fu_636_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_56_fu_735_p4 = {{x_7_fu_730_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_57_fu_811_p1 = j_1_reg_254[29:0];

assign tmp_5_fu_367_p2 = ((p_mask_fu_359_p3 == ap_const_lv32_100) ? 1'b1 : 1'b0);

assign tmp_6_fu_432_p2 = (tmp_9_fu_427_p2 ^ ap_const_lv32_11B);

assign tmp_7_fu_323_p2 = (tmp_2_fu_310_p3 | ap_const_lv32_1);

assign tmp_8_fu_329_p1 = $signed(tmp_7_fu_323_p2);

assign tmp_9_fu_427_p2 = x_6_reg_926 << ap_const_lv32_1;

assign tmp_s_fu_295_p1 = nb;

assign tmp_s_fu_295_p2 = (($signed(j_cast_fu_291_p1) < $signed(tmp_s_fu_295_p1)) ? 1'b1 : 1'b0);

assign x_1_fu_450_p2 = (x_reg_939 ^ tmp_35_fu_445_p2);

assign x_3_fu_536_p2 = (statemt_q0 ^ tmp_50_fu_530_p2);

assign x_5_fu_636_p2 = (statemt_q1 ^ tmp_53_fu_630_p2);

assign x_7_fu_730_p2 = (x_6_reg_926 ^ tmp_9_fu_427_p2);

always @ (posedge ap_clk) begin
    tmp_2_reg_884[1:0] <= 2'b00;
    tmp_3_reg_890[1:0] <= 2'b00;
    tmp_8_reg_900[1:0] <= 2'b01;
    tmp_13_reg_947[1:0] <= 2'b10;
    tmp_23_reg_957[1:0] <= 2'b11;
    tmp_14_reg_1015[1:0] <= 2'b00;
    tmp_15_reg_1021[1:0] <= 2'b00;
    tmp_17_reg_1031[1:0] <= 2'b01;
    tmp_19_reg_1041[1:0] <= 2'b10;
    tmp_21_reg_1051[1:0] <= 2'b11;
end

endmodule //MixColumn_AddRoundKe
